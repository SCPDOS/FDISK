     1                                  
     2                                  ;FDISK utility for SCP/DOS 1.0
     3                                  ;Bypases filesystem to "low-level format" the target fixed disk.
     4                                  ;Restarts the machine upon completion by triple faulting.
     5                                  
     6                                  ;Steps taken:
     7                                  ;0) Call Int 4Ah/EAX=0h. If it returns ah <> 0, then tell the user to
     8                                  ;    stop any other tasks and networking software before continuing.
     9                                  ;    Give them a "Press Enter to continue or ESC to return to DOS" prompt.
    10                                  ;1) Queries the BIOS implementation (in this case SCP/BIOS) for the number
    11                                  ;    of fixed disks.
    12                                  ; Enter the Menu.
    13                                  ;Main menu will have 4 main options and 1 optional option
    14                                  ;   1) Create 
    15                                  
    16                                  ;If the user wants to create a new partition, we ask them how much of the 
    17                                  ; disk they want their partioned to take up as a percentage from 1%-99%
    18                                  ;We then round to the nearest cylinder (multiple of 64 sectors), 
    19                                  ; rounding up (if 0) or down (if past max sector).
    20                                  
    21                                  [map all ./Listings/fdisk.map]
    22                                  [DEFAULT REL]
    23                                  BITS 64
    24                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
    25                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    57 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    58                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    59                              <1> ; another, we save the number of chars to skip to that deep level).
    60                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    61                              <1> ; Only affects for SUBST drives, not JOIN
    62                              <1> ; Flags: Bit 15 set = Network drive
    63                              <1> ;        Bit 14 set = Physical drive
    64                              <1> ;        Bit 13 set = JOIN'ed drive
    65                              <1> ;        Bit 12 set = SUBST'ed drive
    66                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    67                              <1> endstruc
    68                              <1> ;CDS equates
    69                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    70                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    71                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    72                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    73                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    74                              <1> ;------------------------------------------------------------------------;
    75                              <1> ; The SFT is a way to allow applications to open file handles to files 
    76                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    77                              <1> ; under the first header, and then a second header will be linked to the 
    78                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    79                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    80                              <1> ; using the FCBS= command. Default FCBS=5.
    81                              <1> ;
    82                              <1> ; A file handle describes the file, and the location within the file that
    83                              <1> ; we are reading. The file handle can be manipulated without the file
    84                              <1> ; being in memory, thus allowing the user to access data without needing 
    85                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    86                              <1> ; accessing devices, by treating them as files with their drivers 
    87                              <1> ; responding and translating the manipulations of the file handle itself.
    88                              <1> ; Neither the driver nor the application should see or use the SFT for
    89                              <1> ; the handle, as it is subject to change (and will change when file 
    90                              <1> ; sharing provisions are included). The DOS will make requests to the 
    91                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    92                              <1> ; track of the information in the SFT entry for that handle. 
    93                              <1> ;
    94                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    95                              <1> ; can point to the same file. It all depends on what the applications 
    96                              <1> ; want to do with the File.
    97                              <1> ;
    98                              <1> ; !!!!IMPORTANT!!!!
    99                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   100                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   101                              <1> ;
   102                              <1> ;Each SFT may look like this:
   103                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   104                              <1> ;            |                |
   105                              <1> ;       wNumFiles*sft    wNumFiles*sft
   106                              <1> ;
   107                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   108                              <1> ; System FCBs.
   109                              <1> ;
   110                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   111                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   112                              <1> ;
   113                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   114                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   115                              <1> ;------------------------------------------------------------------------;
   116                              <1> struc sfth   ;System file table header
   117                              <1> ; This is the SFT header.
   118                              <1> ; This structure comes before the start of the first file in the array/table.
   119 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   120 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc sft
   124                              <1> ;This is the file struc itself
   125 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   126 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   127 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   128 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   129 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   130 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   131 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   132 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   133 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   134 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   135 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   136 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   137 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   138 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   139 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   140 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   141 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   142 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   144                              <1> ;                           0 means no record
   145                              <1> endstruc
   146                              <1> ;Open Mode equates
   147                              <1> ;Access modes   Bits[2:0]
   148                              <1> ReadAccess      equ 0h
   149                              <1> WriteAccess     equ 1h
   150                              <1> RWAccess        equ 2h
   151                              <1> ;Bit 3 reserved 0
   152                              <1> ;Sharing modes  Bits[6:4]
   153                              <1> CompatShare     equ 0h
   154                              <1> denyRWShare     equ 10h
   155                              <1> denyWriteShare  equ 20h
   156                              <1> denyReadShare   equ 30h
   157                              <1> denyNoneShare   equ 40h
   158                              <1> netFCBShare     equ 70h
   159                              <1> noInherit       equ 80h
   160                              <1> ;Bits 8-12 reserved 0
   161                              <1> 
   162                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   163                              <1> ;Buffering on writes
   164                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   165                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   166                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   167                              <1> ;Attribute Byte
   168                              <1> readOnlyFile    equ 1h
   169                              <1> hiddenFile      equ 2h
   170                              <1> systemFile      equ 4h
   171                              <1> volumeLabel     equ 8h
   172                              <1> directoryFile   equ 10h ;Directory entry
   173                              <1> archiveFile     equ 20h
   174                              <1> ;Device Info equates
   175                              <1> ;For a block device, bits [5:0] contain the drive number
   176                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   177                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   178                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   179                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   180                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   181                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   182                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   183                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   184                              <1> devCharDev      equ 80h ;If set, it is a char device!
   185                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   186                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   187                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   188                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   189                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   190                              <1>  
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   214 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;Note! A buffer is marked as referenced only when the application 
   225                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> ; Memory control block for each memory arena
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> struc mcb
   230 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   231 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   232 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   233 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   234                              <1>     .program:
   235                              <1> endstruc
   236                              <1> ;MCB equates
   237                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   238                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   239                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   240                              <1> mcbMarkCtn      equ "M"
   241                              <1> mcbMarkEnd      equ "Z"
   242                              <1> 
   243                              <1> memFirstFit     equ 0   ;First free block goes to application
   244                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   245                              <1> memLastFit      equ 2   ;Last free block goes to application
   246                              <1> 
   247                              <1> ;Owner = Para aligned address => Owning application PSP
   248                              <1> ;...To consider...
   249                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   250                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   251                              <1> ;------------------------------------------------------------------------;
   252                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   253                              <1> ; following order, thus allowing for return values to be placed in the 
   254                              <1> ; registers by accessing the caller register stack frame.
   255                              <1> ;------------------------------------------------------------------------;
   256                              <1> struc callerFrame
   257 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   258 00000008 ????????????????    <1>     .rbx    resq 1    
   259 00000010 ????????????????    <1>     .rcx    resq 1
   260 00000018 ????????????????    <1>     .rdx    resq 1
   261 00000020 ????????????????    <1>     .rsi    resq 1
   262 00000028 ????????????????    <1>     .rdi    resq 1
   263 00000030 ????????????????    <1>     .rbp    resq 1
   264 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   265 00000040 ????????????????    <1>     .r9     resq 1
   266                              <1> ;Pushed by Processor when invoked via Interrupt
   267 00000048 ????????????????    <1>     .rip    resq 1
   268 00000050 ????????????????    <1>     .cs     resq 1
   269 00000058 ????????????????    <1>     .flags  resq 1
   270                              <1> endstruc
   271                              <1> 
   272                              <1> struc dpl
   273                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   274                              <1> ; server calls
   275 00000000 ????????????????    <1>     .rax    resq 1
   276 00000008 ????????????????    <1>     .rbx    resq 1
   277 00000010 ????????????????    <1>     .rcx    resq 1
   278 00000018 ????????????????    <1>     .rdx    resq 1
   279 00000020 ????????????????    <1>     .rsi    resq 1
   280 00000028 ????????????????    <1>     .rdi    resq 1
   281 00000030 ????????????????    <1>     .r8     resq 1
   282 00000038 ????????????????    <1>     .r9     resq 1
   283 00000040 ????????????????    <1>     .align  resq 1
   284 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   285 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   286                              <1> endstruc
   287                              <1> 
   288                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   289 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   290 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   291 00000010 ????????????????    <1>     .newSFTVal      resq 1
   292 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   293 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   294 00000028 ????????????????    <1>     .newLastdrive   resq 1
   295 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   296 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   297 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   298 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   299 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   300 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   301 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   302                              <1> endstruc
   303                              <1> 
   304                              <1> struc filename
   305                              <1> ;8.3 File name struct
   306 00000000 ????????????????    <1>     .fName  resb 8
   307 00000008 ??????              <1>     .fExt   resb 3
   308                              <1> endstruc
   309                              <1> 
   310                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   311 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   312 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   313 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   314 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   315 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   316 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   317 00000016 ????                <1>     .fileTime   resw 1  ;File time
   318 00000018 ????                <1>     .fileDate   resw 1  ;File date
   319 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   320 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   321                              <1> endstruc
   322                              <1> 
   323                              <1> struc psp
   324 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   325 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   326 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   327 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   328 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   329 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   330 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   331                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   332 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   333 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   334 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   335 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   336 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   337 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   338 0000005B ??                  <1>                 resb 1  ;Reserved byte
   339                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   340                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   341                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   342                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   343                              <1> ; always used and xtraHdlSz.
   344                              <1> ;Will need to add two SYSCALLS for future expansion:
   345                              <1> ;       1) Get Program Environment Pointer
   346                              <1> ;       2) Get Command Line arguments pointer
   347                              <1> ;The below are in the same place as in DOS.
   348                              <1>     .cmdLineArgPtr: ;Symbol for future use
   349 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   350 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   351                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   352 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   353 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   354                              <1> endstruc
   355                              <1> 
   356                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   357                              <1> 
   358                              <1> struc clkStruc
   359 00000000 ????                <1>     .dateWord   resw 1
   360 00000002 ??                  <1>     .minutes    resb 1
   361 00000003 ??                  <1>     .hours      resb 1
   362 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   363 00000005 ??                  <1>     .seconds    resb 1
   364                              <1> endstruc
   365                              <1> 
   366                              <1> struc countryStruc
   367 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   368                              <1>                         ;0 = month day year hh:mm:ss
   369                              <1>                         ;1 = day month year hh:mm:ss
   370                              <1>                         ;2 = year month day hh:mm:ss
   371 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   372 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   373 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   374 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   375 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   376 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   377                              <1>                         ;0 = Symbol leads, without space
   378                              <1>                         ;1 = Symbol follows, without space
   379                              <1>                         ;2 = Symbol leads, one space
   380                              <1>                         ;3 = Symbol follows, one space
   381                              <1>                         ;4 = Symbol replace decimal separator
   382 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   383 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   384 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   385 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   386 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   387                              <1> endstruc
   388                              <1> 
   389                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   390                              <1> ;for a space of 64Gb
   391                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   392                              <1> dosLowBase  equ 600h    ;Low load address
   393                              <1> 
   394                              <1> ;Critical Error AH bitfield equates
   395                              <1> critRead    equ 0h
   396                              <1> critWrite   equ 1h
   397                              <1> critDOS     equ 0h
   398                              <1> critFAT     equ 2h
   399                              <1> critDir     equ 4h
   400                              <1> critData    equ 6h
   401                              <1> critFailOK  equ 8h
   402                              <1> critRetryOK equ 10h
   403                              <1> critIgnorOK equ 20h
   404                              <1> critCharDev equ 80h
   405                              <1> 
   406                              <1> critIgnore  equ 0
   407                              <1> critRetry   equ 1
   408                              <1> critAbort   equ 2
   409                              <1> critFail    equ 3
   410                              <1> 
   411                              <1> ;MISC ASCII control chars
   412                              <1> NUL equ 00h ;^@         | ASCII Null
   413                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   414                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   415                              <1> BEL equ 07h ;^G         | ASCII Bell
   416                              <1> BSP equ 08h ;^H         | ASCII Backspace
   417                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   418                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   419                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   420                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   421                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   422                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   423                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   424                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   425                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   426                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   427                              <1> SPC equ 20h ;Printable  | ASCII Space
   428                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   429                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   430                              <1> 
   431                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   432                              <1> ;Extended Ascii Codes
   433                              <1> eF1     equ 3Bh ;F1 second byte
   434                              <1> eF2     equ 3Ch ;F2 second byte
   435                              <1> eF3     equ 3Dh ;F3 second byte
   436                              <1> eF4     equ 3Eh ;F4 second byte
   437                              <1> eF5     equ 3Fh ;F5 second byte
   438                              <1> eF6     equ 40h ;F6 second byte
   439                              <1> eF7     equ 41h ;F7 second byte
   440                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   441                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   442                              <1> eIns    equ 52h ;Insert second byte
   443                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   444                              <1> 
   445                              <1> ;Default Configuration for the system
   446                              <1> 
   447                              <1> buffersDefault  equ 30
   448                              <1> filesDefault    equ 20
   449                              <1> fcbsDefault     equ 4
   450                              <1> safeFcbsDeflt   equ 0
   451                              <1> lastDriveDeflt  equ 5   
    26                                  %include "./Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    19                              <1> 
    20 00000000 ??????              <1>     .jmpBoot    resb 3 
    21 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    22 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    23 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    24 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    25 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    26 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    27 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    28 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    29 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    30 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    31 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    32 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    33 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    34                              <1> 
    35 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    36 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    37 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    38 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    39 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    40 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    41                              <1> 
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    62 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    63 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    64 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    65 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    66 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    67 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    68                              <1> 
    69 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    70 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    71 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    72 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    73 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    74 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    75                              <1> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc mbr
    79 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    80 000001B8 ????????            <1>     .diskID     resb 4
    81 000001BC ????                <1>     .reserved   resb 2
    82 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    83 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    84 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    85 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    86 000001FE ????                <1>     .mbrSig     resb 2
    87                              <1> endstruc
    88                              <1> 
    89                              <1> struc mbrEntry
    90 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    91 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    92 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
    93 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    94 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    95 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    96                              <1> endstruc
    97                              <1> 
    98                              <1> struc ebr
    99 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   100 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   101 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   102 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   103 000001FE ????                <1>     .mbrSig     resb 2
   104                              <1> endstruc
   105                              <1> 
   106                              <1> 
   107                              <1> struc fatDirEntry
   108                              <1> 
   109 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   110 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   111 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   112 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   113 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   114 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   115 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   116 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   117 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   118 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   119 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   120 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   121                              <1> 
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139 00000000 ??????              <1>     .jmpBoot                resb 3 
   140 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   141 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   142 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   143 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   144 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   145 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   146 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   147 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   148 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   149 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   150 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   151 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   152 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   153 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   154 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   155 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   156 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   157 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc FSInfo
   162                              <1> 
   163 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   164 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   165 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   166 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   167 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   168 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   169 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   170                              <1> 
   171                              <1> endstruc
   172                              <1> 
   173                              <1> %macro defaultBPB 0
   174                              <1>     db 0E9h
   175                              <1>     db 00h
   176                              <1>     db 90h
   177                              <1>     db 'SCPDOSv1'
   178                              <1>     dw 0200h                       
   179                              <1>     db 01h                         
   180                              <1>     dw 0001h                           
   181                              <1>     db 02h                              
   182                              <1>     dw 00E0h            
   183                              <1>     dw 0B40h   
   184                              <1>     db 0F0h                   
   185                              <1>     dw 0009h                   
   186                              <1>     dw 0012h                     
   187                              <1>     dw 0002h                  
   188                              <1>     dd 0                 
   189                              <1>     dd 0 
   190                              <1>     db 00h
   191                              <1>     db 00h
   192                              <1>     db 29h
   193                              <1>     dd 0
   194                              <1>     db 'NO NAME    '
   195                              <1>     db 'FAT12   '
   196                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   197                              <1> %endmacro
    27                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on INT 44h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    28                                  
    29                                  ;Hard disks must have 512 byte sectors
    30                                  fddSectorSize   equ 200h
    31                                  
    32                                  %include "./Source/fdskMain.asm"
     1                              <1> ;Main FDISK file
     2                              <1> startFdisk:
     3 00000000 EB01                <1>     jmp short .cVersion
     4 00000002 01                  <1> .vNum:          db 1
     5                              <1> .cVersion:
     6 00000003 FC                  <1>     cld
     7 00000004 31C0                <1>     xor eax, eax
     8 00000006 CD4A                <1>     int 4Ah
     9 00000008 85C0                <1>     test eax, eax
    10 0000000A 7422                <1>     jz notMultitasking
    11 0000000C 488D15AD0C0000      <1>     lea rdx, multiMsg
    12 00000013 B800090000          <1>     mov eax, 0900h
    13 00000018 CD41                <1>     int 41h
    14                              <1> .inLoop:
    15 0000001A B800080000          <1>     mov eax, 0800h  ;Console input no echo
    16 0000001F CD41                <1>     int 41h
    17 00000021 3C0D                <1>     cmp al, CR
    18 00000023 7409                <1>     je notMultitasking
    19 00000025 3C1B                <1>     cmp al, ESC 
    20 00000027 75F1                <1>     jne .inLoop
    21 00000029 E9A9060000          <1>     jmp badExit
    22                              <1> notMultitasking:
    23                              <1> ;Check Version Number
    24 0000002E B430                <1>     mov ah, 30h
    25 00000030 CD41                <1>     int 41h
    26 00000032 3A05CAFFFFFF        <1>     cmp al, byte [startFdisk.vNum] ;Version 1
    27 00000038 760C                <1>     jbe .okVersion
    28 0000003A 488D15A0130000      <1>     lea rdx, badVerStr
    29 00000041 E98D060000          <1>     jmp badPrint ;Exit to caller or DOS to print bad version
    30                              <1> .okVersion:
    31 00000046 E8850B0000          <1>     call biosGetNumberOfFixedDisks
    32 0000004B 803D4A0C000000      <1>     cmp byte [numDisks], 0
    33 00000052 750C                <1>     jnz .nonZeroDisks   ;Jump if we have any Fixed Disks
    34 00000054 488D159E130000      <1>     lea rdx, noDisks
    35 0000005B E973060000          <1>     jmp badPrint
    36                              <1> .nonZeroDisks:
    37                              <1> ;Set CtrlC hook
    38 00000060 488D153A060000      <1>     lea rdx, exit.ctrlCHandler
    39 00000067 B843250000          <1>     mov eax, 2543h
    40 0000006C CD41                <1>     int 41h
    41                              <1> ;Print Start message
    42 0000006E 488D15E00C0000      <1>     lea rdx, strtMsg
    43 00000075 E869080000          <1>     call print
    44 0000007A E888080000          <1>     call printVersion
    45 0000007F 488D15270D0000      <1>     lea rdx, cpyrtMsg
    46 00000086 E858080000          <1>     call print
    47                              <1>     ;Allocate 512 bytes now
    48 0000008B B800480000          <1>     mov eax, 4800h
    49 00000090 BB20000000          <1>     mov ebx, fddSectorSize >> 4 
    50 00000095 CD41                <1>     int 41h
    51 00000097 0F8226060000        <1>     jc badMemoryExit
    52 0000009D 488905090C0000      <1>     mov qword [xferBuffer], rax
    53                              <1> 
    54 000000A4 C605E60B000001      <1>     mov byte [currentDisk], 1
    55 000000AB E8A40B0000          <1>     call biosGetHardDiskParameters  ;Start by getting the FDD params for disk 1
    56 000000B0 66813DE10B00000002  <1>     cmp word [sectorSize], fddSectorSize
    57 000000B9 0F850D060000        <1>     jne badSectorExit
    58 000000BF E874060000          <1>     call getPartitionFlags  ;Get the partition flags
    59                              <1> 
    60                              <1> mainLoop:
    61 000000C4 E813080000          <1>     call printcrlf
    62 000000C9 E80E080000          <1>     call printcrlf
    63 000000CE 488D15090E0000      <1>     lea rdx, mainPageMsg
    64 000000D5 E809080000          <1>     call print
    65 000000DA 803DBB0B000001      <1>     cmp byte [numDisks], 1
    66 000000E1 740C                <1>     je .singlefdisk
    67 000000E3 488D158B0E0000      <1>     lea rdx, mpOptionalMsg
    68 000000EA E8F4070000          <1>     call print
    69                              <1> .singlefdisk:
    70 000000EF 488D155D0D0000      <1>     lea rdx, exitOptionMsg
    71 000000F6 E8E8070000          <1>     call print
    72 000000FB E8EB070000          <1>     call printPrompt    ;Now print the prompt
    73                              <1> ;Now we input loop
    74 00000100 B302                <1>     mov bl, 2
    75 00000102 E8A4070000          <1>     call takeInput
    76 00000107 803D9B0B000001      <1>     cmp byte [charsTyped], 1
    77 0000010E 75B4                <1>     jne mainLoop    ;If the user didnt type 1 char, reprompt the user
    78 00000110 E8C7070000          <1>     call printcrlf
    79 00000115 8A058F0B0000        <1>     mov al, byte [inputString]  ;Get the char typed
    80 0000011B 3C31                <1>     cmp al, "1"
    81 0000011D 744A                <1>     je createPtnMain
    82 0000011F 3C32                <1>     cmp al, "2"
    83 00000121 0F8461020000        <1>     je changeActivePtnMain
    84 00000127 3C33                <1>     cmp al, "3"
    85 00000129 0F8486030000        <1>     je deletePtnMain
    86 0000012F 3C34                <1>     cmp al, "4"
    87 00000131 0F849D040000        <1>     je displayPtnInfoMain
    88 00000137 803D5E0B000001      <1>     cmp byte [numDisks], 1
    89 0000013E 7408                <1>     je .singleDiskOptions
    90 00000140 3C35                <1>     cmp al, "5"
    91 00000142 0F84A7040000        <1>     je selectDiskMain
    92                              <1> .singleDiskOptions:
    93 00000148 3C58                <1>     cmp al, "X"
    94 0000014A 0F8402050000        <1>     je exit
    95 00000150 3C78                <1>     cmp al, "x"
    96 00000152 0F84FA040000        <1>     je exit
    97                              <1>     ;If we didnt get any valid options, go back again
    98                              <1>     ;Prompt the user to make a valid selection
    99 00000158 488D15060D0000      <1>     lea rdx, selectValidOption
   100 0000015F E87F070000          <1>     call print
   101 00000164 E95BFFFFFF          <1>     jmp mainLoop
   102                              <1> 
   103                              <1> 
   104                              <1> createPtnMain:
   105                              <1> ;Read the MBR for the selected Fixed Disk
   106                              <1> ;If there is a discernable MBR, error and return to mainLoop
   107                              <1> ;Else, go through the createPage
   108 00000169 31D2                <1>     xor edx, edx    ;Read sector 0
   109 0000016B E8AD060000          <1>     call sectorRead
   110 00000170 0F8244050000        <1>     jc badReadExit
   111                              <1>     ;Sector in buffer, now we check
   112 00000176 488B1D300B0000      <1>     mov rbx, qword [xferBuffer]
   113 0000017D 0FB783FE010000      <1>     movzx eax, word [rbx + mbr.mbrSig]  ;Get this sig
   114 00000184 663D55AA            <1>     cmp ax, 0AA55h  ;Usual
   115 00000188 7406                <1>     je .mbrFound
   116 0000018A 663DAA55            <1>     cmp ax, 055AAh  ;Unusual but we accept it
   117 0000018E 7554                <1>     jne .createNewMBR
   118                              <1> .mbrFound:
   119                              <1> ;An MBR was found here. 
   120                              <1> ;DOS can currently only be installed on the first partition. Thus we 
   121                              <1> ; only check the first partition entry for a DOS signature. If one is 
   122                              <1> ; found, we refuse to proceed.
   123                              <1> ;We also refuse to use CHS. Set those entries to 0
   124 00000190 53                  <1>     push rbx
   125 00000191 E8A2050000          <1>     call getPartitionFlags  ;Now lets get some stats on the partition
   126 00000196 5B                  <1>     pop rbx
   127 00000197 803D090B000000      <1>     cmp byte [numValidPtn], 0   ;If no valid partitions, act like new MBR
   128 0000019E 7444                <1>     je .createNewMBR
   129 000001A0 8A83C2010000        <1>     mov al, byte [rbx + mbr.mbrEntry1 + mbrEntry.ptnType]
   130 000001A6 3C01                <1>     cmp al, 01h
   131 000001A8 741D                <1>     je .fatPtnDetected
   132 000001AA 3C04                <1>     cmp al, 04
   133 000001AC 7419                <1>     je .fatPtnDetected
   134 000001AE 3C06                <1>     cmp al, 06
   135 000001B0 7415                <1>     je .fatPtnDetected
   136 000001B2 3C0B                <1>     cmp al, 0Bh
   137 000001B4 7411                <1>     je .fatPtnDetected
   138 000001B6 3C0C                <1>     cmp al, 0Ch
   139 000001B8 740D                <1>     je .fatPtnDetected
   140 000001BA 3C0E                <1>     cmp al, 0Eh
   141 000001BC 7409                <1>     je .fatPtnDetected
   142 000001BE 488D15EA0E0000      <1>     lea rdx, createForeignBad
   143 000001C5 EB07                <1>     jmp short .fpDCommon
   144                              <1> .fatPtnDetected:
   145 000001C7 488D15C60D0000      <1>     lea rdx, createPageBadMsg
   146                              <1> .fpDCommon:
   147 000001CE 52                  <1>     push rdx
   148 000001CF E808070000          <1>     call printcrlf
   149 000001D4 E803070000          <1>     call printcrlf
   150 000001D9 5A                  <1>     pop rdx
   151 000001DA E804070000          <1>     call print
   152 000001DF E9E0FEFFFF          <1>     jmp mainLoop
   153                              <1> .createNewMBR:
   154                              <1> ;Here we lay down a fresh MBR.
   155                              <1> ;Prompt the user for their ptn size
   156 000001E4 488D15D00D0000      <1>     lea rdx, createPageMsg
   157 000001EB E8F6050000          <1>     call getYNresponse  ;ZF=ZE => Y response, ZF=NZ => N response
   158                              <1>     ;If the user responds Y, then we allocate the whole disk
   159 000001F0 7526                <1>     jnz .partialAllocation
   160                              <1>     ;If here, start from "cylinder 1"
   161 000001F2 C705A10A0000400000- <1>     mov dword [ptnStart], 40h
   161 000001FB 00                  <1>
   162 000001FC 8B05900A0000        <1>     mov eax, dword [curDiskSize]
   163 00000202 2B05950A0000        <1>     sub eax, dword [ptnStart]    ;Remove the sectors from the start of the disk
   164 00000208 8905930A0000        <1>     mov dword [ptnSize], eax
   165                              <1>     ;Always produce ptn types 0Ch - FAT with LBA (technically FAT32)
   166 0000020E E898050000          <1>     call getPtnType
   167 00000213 E996000000          <1>     jmp .copyMBR
   168                              <1> .partialAllocation:
   169 00000218 488D15EB0D0000      <1>     lea rdx, createPage2Msg
   170 0000021F E8BF060000          <1>     call print
   171                              <1> .paLp:
   172 00000224 488D15440E0000      <1>     lea rdx, createPromptMsg
   173 0000022B E8B3060000          <1>     call print
   174 00000230 B303                <1>     mov bl, 3
   175 00000232 E874060000          <1>     call takeInput
   176 00000237 803D6B0A000000      <1>     cmp byte [charsTyped], 0    ;Repeat prompt if no chars typed (somehow)
   177 0000023E 74E4                <1>     je .paLp 
   178 00000240 803D630A000078      <1>     cmp byte [inputString], "x"
   179 00000247 0F8477FEFFFF        <1>     je mainLoop
   180 0000024D 803D560A000058      <1>     cmp byte [inputString], "X"
   181 00000254 0F846AFEFFFF        <1>     je mainLoop
   182 0000025A 66B83030            <1>     mov ax,"00"
   183 0000025E 803D440A000001      <1>     cmp byte [charsTyped], 1
   184 00000265 7708                <1>     ja .twoDigits
   185 00000267 8A053D0A0000        <1>     mov al, byte [inputString]
   186 0000026D EB0C                <1>     jmp short .gotDigits
   187                              <1> .twoDigits:
   188 0000026F 8A25350A0000        <1>     mov ah, byte [inputString]
   189 00000275 8A05300A0000        <1>     mov al, byte [inputString + 1]
   190                              <1> .gotDigits:
   191                              <1> ;Now check the digits are ok
   192                              <1> ;ah contains high digit, al contains low digit
   193 0000027B E88F040000          <1>     call getValue
   194 00000280 72A2                <1>     jc .paLp
   195                              <1>     ;eax has the percentage of the disk to use
   196 00000282 8B1D0A0A0000        <1>     mov ebx, dword [curDiskSize]    ;Get the disk size
   197 00000288 F7E3                <1>     mul ebx
   198 0000028A BB64000000          <1>     mov ebx, 100    ;Divide by 100
   199 0000028F 31D2                <1>     xor edx, edx
   200 00000291 F7F3                <1>     div ebx ;Get in eax the number of sectors to allocate rounded down
   201 00000293 C705000A0000400000- <1>     mov dword [ptnStart], 64
   201 0000029C 00                  <1>
   202 0000029D 2B05FA090000        <1>     sub eax, dword [ptnStart]
   203 000002A3 8905F8090000        <1>     mov dword [ptnSize], eax
   204 000002A9 E8FD040000          <1>     call getPtnType
   205                              <1> .copyMBR:
   206                              <1> ;Now we copy the MBR into the xferBuffer
   207 000002AE 488D3567120000      <1>     lea rsi, freshMBRcopy   ;Has Zeroed CHS fields
   208 000002B5 488B3DF1090000      <1>     mov rdi, qword [xferBuffer]
   209 000002BC B940000000          <1>     mov ecx, 200h/8
   210 000002C1 F348A5              <1>     rep movsq   ;Copy it over
   211                              <1> .installPartition:
   212 000002C4 488B1DE2090000      <1>     mov rbx, qword [xferBuffer]
   213 000002CB 8B05CC090000        <1>     mov eax, dword [ptnStart]
   214 000002D1 8983C6010000        <1>     mov dword [rbx + mbr.mbrEntry1 + mbrEntry.lbaStart], eax
   215 000002D7 8B05C4090000        <1>     mov eax, dword [ptnSize]
   216 000002DD 8983CA010000        <1>     mov dword [rbx + mbr.mbrEntry1 + mbrEntry.numSectors], eax
   217 000002E3 0FB605BB090000      <1>     movzx eax, byte [ptnType]
   218 000002EA 8883C2010000        <1>     mov byte [rbx + mbr.mbrEntry1 + mbrEntry.ptnType], al
   219                              <1>     ;Finish by marking this partition as active, and clearing
   220                              <1>     ; active flag from other partitions
   221 000002F0 C683BE01000080      <1>     mov byte [rbx + mbr.mbrEntry1 + mbrEntry.ptnAtrib], 80h
   222 000002F7 C683CE01000000      <1>     mov byte [rbx + mbr.mbrEntry2 + mbrEntry.ptnAtrib], 00h
   223 000002FE C683DE01000000      <1>     mov byte [rbx + mbr.mbrEntry3 + mbrEntry.ptnAtrib], 00h
   224 00000305 C683EE01000000      <1>     mov byte [rbx + mbr.mbrEntry4 + mbrEntry.ptnAtrib], 00h
   225                              <1> 
   226 0000030C 31D2                <1>     xor edx, edx    ;Write sector 0 on the selected disk 
   227 0000030E E832050000          <1>     call sectorWrite
   228 00000313 0F8298030000        <1>     jc badWriteExit
   229                              <1>     ;Now setup the partial VBR to the first sector of the partition
   230                              <1>     ;Start by sanitising the Buffer
   231 00000319 488B3D8D090000      <1>     mov rdi, qword [xferBuffer]
   232 00000320 31C0                <1>     xor eax, eax
   233 00000322 B940000000          <1>     mov ecx, 200h/8
   234 00000327 57                  <1>     push rdi
   235 00000328 F348AB              <1>     rep stosq
   236 0000032B 5F                  <1>     pop rdi
   237 0000032C 488D35AB110000      <1>     lea rsi, partialVBR
   238 00000333 B93E000000          <1>     mov ecx, partialVBRL
   239 00000338 F3A4                <1>     rep movsb
   240                              <1>     ;xferBuffer has the partial vbr in it now
   241                              <1>     ;rbx points to it
   242 0000033A 8B055D090000        <1>     mov eax, dword [ptnStart]
   243 00000340 89431C              <1>     mov dword [rbx + bpb.hiddSec], eax
   244 00000343 8B0558090000        <1>     mov eax, dword [ptnSize]
   245 00000349 A90000FFFF          <1>     test eax, 0FFFF0000h ;Check for high bits
   246 0000034E 750D                <1>     jnz .fat32Var
   247 00000350 66894313            <1>     mov word [rbx + bpb.totSec16], ax
   248 00000354 C7432000000000      <1>     mov dword [rbx + bpb.totSec32], 0
   249 0000035B EB09                <1>     jmp short .writeVBR
   250                              <1> .fat32Var:
   251 0000035D 66C743130000        <1>     mov word [rbx + bpb.totSec16], 0
   252 00000363 894320              <1>     mov dword [rbx + bpb.totSec32], eax
   253                              <1> .writeVBR:
   254 00000366 8B1531090000        <1>     mov edx, dword [ptnStart]
   255 0000036C E8D4040000          <1>     call sectorWrite
   256 00000371 0F823A030000        <1>     jc badWriteExit
   257                              <1> 
   258 00000377 488D15120D0000      <1>     lea rdx, createDoneMsg
   259 0000037E E860050000          <1>     call print
   260 00000383 E93CFDFFFF          <1>     jmp mainLoop
   261                              <1> 
   262                              <1> changeActivePtnMain:
   263                              <1>     ;Now we check which partitions are online. 
   264                              <1>     ; If no partitions are OK, prompt the bad MBR string and return to mainLoop
   265                              <1>     ; If 1 partition is OK and Active, say Partition already active and ret.
   266                              <1>     ; If 1 partition is OK and set active and say Partition already...
   267                              <1>     ; If more than 1 ptn is OK, prompt which partition to set active
   268 00000388 E8E9040000          <1>     call getMBRandCheckValid
   269 0000038D 0F8227030000        <1>     jc badReadExit
   270 00000393 0F852BFDFFFF        <1>     jnz mainLoop
   271 00000399 E886050000          <1>     call printPartitionStatusTable
   272 0000039E 803D0209000000      <1>     cmp byte [numValidPtn], 0  ;If no partitions are valid, prompt to create
   273 000003A5 750A                <1>     jnz .validPtn
   274 000003A7 E81E050000          <1>     call printBadMBR
   275 000003AC E913FDFFFF          <1>     jmp mainLoop 
   276                              <1> .validPtn:
   277                              <1> ;At least 1 partition is ok.
   278                              <1> ;If it is exactly 1 partition that is ok, check it is active too
   279 000003B1 803DEF08000001      <1>     cmp byte [numValidPtn], 1
   280 000003B8 7552                <1>     jne .manyPartitions
   281                              <1>     ;Now we check if that one partition is active. If it is, write message.
   282                              <1>     ;If it is not, set it to active and write message.
   283                              <1>     ;First we find partition
   284 000003BA 31C0                <1>     xor eax, eax  ;Start from partition 1
   285                              <1> .ptnSearchLp:
   286 000003BC FFC0                <1>     inc eax
   287 000003BE E8D0030000          <1>     call checkPartitionValid
   288 000003C3 74F7                <1>     jz .ptnSearchLp ;This can never infinite loop
   289                              <1> ;eax has the partition number to check for being active
   290                              <1> ;mbr_size is 16 bytes so shift eax left by 4
   291 000003C5 89C1                <1>     mov ecx, eax    ;Save the number in ecx
   292 000003C7 FFC8                <1>     dec eax ;Turn eax into an offset
   293 000003C9 C1E004              <1>     shl eax, 4  ;Multiply by 16
   294 000003CC 89C3                <1>     mov ebx, eax
   295 000003CE 488B35D8080000      <1>     mov rsi, qword [xferBuffer]
   296 000003D5 488DB41EBE010000    <1>     lea rsi, qword [rsi + mbr.mbrEntry1 + rbx]
   297                              <1>     ;rsi now points to the 1 partition
   298 000003DD F60680              <1>     test byte [rsi + mbrEntry.ptnAtrib], 80h    ;Is active bit set?
   299 000003E0 7510                <1>     jnz .singleActive   ;If yes, skip setting
   300 000003E2 800E80              <1>     or byte [rsi + mbrEntry.ptnAtrib], 80h  ;Else set the bit
   301 000003E5 31D2                <1>     xor edx, edx
   302 000003E7 E859040000          <1>     call sectorWrite    ;Write that sector back to the disk
   303 000003EC 0F82BF020000        <1>     jc badWriteExit
   304                              <1> .singleActive:
   305                              <1> ;Use the partition number in ecx to fix message
   306 000003F2 80C930              <1>     or cl, "0"
   307 000003F5 880DE70C0000        <1>     mov byte [activeSinglePtnMsg.number], cl
   308 000003FB 488D15D40C0000      <1>     lea rdx, activeSinglePtnMsg
   309 00000402 E8DC040000          <1>     call print
   310 00000407 E9B8FCFFFF          <1>     jmp mainLoop
   311                              <1> 
   312                              <1> .manyPartitions:
   313                              <1> ;If multiple partitions are marked as active, claim invalid MBR
   314 0000040C 8A0594080000        <1>     mov al, byte [ptnFlags]
   315 00000412 C0E804              <1>     shr al, 4   ;Bring the high nybble bitfield into low nybble
   316 00000415 3C01                <1>     cmp al, 1
   317 00000417 7416                <1>     je .manyValid
   318 00000419 3C02                <1>     cmp al, 2
   319 0000041B 7412                <1>     je .manyValid
   320 0000041D 3C04                <1>     cmp al, 4
   321 0000041F 740E                <1>     je .manyValid
   322 00000421 3C08                <1>     cmp al, 8
   323 00000423 740A                <1>     je .manyValid
   324                              <1>     ;Multiple active partitions is a bad MBR. Exit and rebuild MBR
   325 00000425 E8A0040000          <1>     call printBadMBR
   326 0000042A E995FCFFFF          <1>     jmp mainLoop
   327                              <1> .manyValid:
   328 0000042F 488D15C20C0000      <1>     lea rdx, activePromptMsg
   329 00000436 E8A8040000          <1>     call print
   330 0000043B B302                <1>     mov bl, 2
   331 0000043D E869040000          <1>     call takeInput
   332 00000442 803D6008000001      <1>     cmp byte [charsTyped], 1
   333 00000449 75E4                <1>     jne .manyValid
   334 0000044B 0FB60558080000      <1>     movzx eax, byte [inputString]  ;Get the first byte
   335 00000452 3C31                <1>     cmp al, "1"
   336 00000454 72D9                <1>     jb .manyValid
   337 00000456 3C34                <1>     cmp al, "4"
   338 00000458 77D5                <1>     ja .manyValid
   339 0000045A 8805DA0C0000        <1>     mov byte [activePartitionSetMsg.number], al ;Set this as the new active ptn
   340 00000460 2C31                <1>     sub al, "1"
   341                              <1>     ;al is now a 0 based partition number
   342 00000462 C1E004              <1>     shl eax, 4  ;Multiply by 16 to get number of bytes into the table
   343 00000465 488B3541080000      <1>     mov rsi, qword [xferBuffer]
   344 0000046C 488DB6BE010000      <1>     lea rsi, qword [rsi + mbr.mbrEntry1]    ;Point to the first table entry
   345 00000473 488D3C06            <1>     lea rdi, qword [rsi + rax]  ;Get the pointer to mark as active
   346 00000477 B904000000          <1>     mov ecx, 4
   347                              <1> .setActiveBytes:
   348 0000047C E827000000          <1>     call .editActiveByte
   349 00000481 FFC9                <1>     dec ecx
   350 00000483 75F7                <1>     jnz .setActiveBytes
   351                              <1>     
   352 00000485 488D15A20C0000      <1>     lea rdx, activePartitionSetMsg
   353 0000048C E852040000          <1>     call print
   354                              <1>     ;Print the status table again to confirm what has happened
   355 00000491 E88E040000          <1>     call printPartitionStatusTable
   356 00000496 31D2                <1>     xor edx, edx
   357 00000498 E8A8030000          <1>     call sectorWrite    ;Write the sector to disk with updated 
   358 0000049D 0F820E020000        <1>     jc badWriteExit
   359 000004A3 E91CFCFFFF          <1>     jmp mainLoop
   360                              <1>     
   361                              <1> .editActiveByte:
   362                              <1> ;rsi -> current partition entry
   363                              <1> ;rdi -> Entry to mark as active
   364 000004A8 C60600              <1>     mov byte [rsi + mbrEntry.ptnAtrib], 00h ;Always clear
   365 000004AB 4839FE              <1>     cmp rsi, rdi
   366                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34 000004AE 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000004B0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
   367 000004B1 C60680              <1>     mov byte [rsi + mbrEntry.ptnAtrib], 80h ;Else, set the bit
   368                              <1>     return
    13                              <2> %%_ret:
    14 000004B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   369                              <1> 
   370                              <1> deletePtnMain:
   371                              <1> ;The user cannot delete an active partition UNLESS it is the last
   372                              <1> ; partition left on the MBR
   373 000004B5 E8BC030000          <1>     call getMBRandCheckValid    ;Gets up to date info on our MBR
   374 000004BA 0F82FA010000        <1>     jc badReadExit
   375 000004C0 0F85FEFBFFFF        <1>     jnz mainLoop
   376 000004C6 E859040000          <1>     call printPartitionStatusTable
   377 000004CB 803DD507000000      <1>     cmp byte [numValidPtn], 0
   378 000004D2 750A                <1>     jne .notNewMBR
   379 000004D4 E8F1030000          <1>     call printBadMBR
   380 000004D9 E9E6FBFFFF          <1>     jmp mainLoop 
   381                              <1> .notNewMBR:
   382 000004DE 803DC207000001      <1>     cmp byte [numValidPtn], 1
   383 000004E5 754A                <1>     jne .multiplePartitions
   384                              <1>     ;Here we have a single partition, do we want to delete
   385                              <1> .nukeMBR:
   386 000004E7 488D155F0C0000      <1>     lea rdx, deleteNukeMsg
   387 000004EE E8F3020000          <1>     call getYNresponse  ;ZF = ZE => Y, ZF = NZ => N
   388 000004F3 0F85CBFBFFFF        <1>     jnz mainLoop
   389                              <1>     ;Nuke the whole partition table
   390 000004F9 488B3DAD070000      <1>     mov rdi, qword [xferBuffer]
   391 00000500 488DBFBE010000      <1>     lea rdi, qword [rdi + mbr.mbrEntry1]
   392 00000507 B908000000          <1>     mov ecx, 8
   393 0000050C 31C0                <1>     xor eax, eax
   394 0000050E F348AB              <1>     rep stosq
   395 00000511 31D2                <1>     xor edx, edx
   396 00000513 E82D030000          <1>     call sectorWrite
   397 00000518 0F8293010000        <1>     jc badWriteExit
   398 0000051E 66AB                <1>     stosw   ;Clear the bootable signature too
   399 00000520 488D15500C0000      <1>     lea rdx, deleteNukeCompleteMsg
   400 00000527 E8B7030000          <1>     call print
   401 0000052C E993FBFFFF          <1>     jmp mainLoop
   402                              <1> .multiplePartitions: 
   403                              <1> ;Now before we proceed, check if we have multiple active partitions.
   404                              <1> ;If so, we jump to the nuke subroutine
   405 00000531 8A056F070000        <1>     mov al, byte [ptnFlags]
   406 00000537 C0E804              <1>     shr al, 4
   407 0000053A 3C01                <1>     cmp al, 1
   408 0000053C 741A                <1>     je .multipleOk
   409 0000053E 3C02                <1>     cmp al, 2
   410 00000540 7416                <1>     je .multipleOk
   411 00000542 3C04                <1>     cmp al, 4
   412 00000544 7412                <1>     je .multipleOk
   413 00000546 3C08                <1>     cmp al, 8
   414 00000548 740E                <1>     je .multipleOk
   415 0000054A 488D15970C0000      <1>     lea rdx, deleteBadFoundMsg
   416 00000551 E88D030000          <1>     call print
   417 00000556 EB8F                <1>     jmp short .nukeMBR
   418                              <1> .multipleOk:
   419 00000558 488D15350C0000      <1>     lea rdx, deleteSelectMsg
   420 0000055F E87F030000          <1>     call print
   421 00000564 B302                <1>     mov bl, 2
   422 00000566 E840030000          <1>     call takeInput
   423 0000056B 803D3707000001      <1>     cmp byte [charsTyped], 1
   424 00000572 75BD                <1>     jne .multiplePartitions
   425 00000574 0FB6052F070000      <1>     movzx eax, byte [inputString]  ;Get the first byte
   426 0000057B 3C31                <1>     cmp al, "1"
   427 0000057D 72B2                <1>     jb .multiplePartitions
   428 0000057F 3C34                <1>     cmp al, "4"
   429 00000581 77AE                <1>     ja .multiplePartitions
   430 00000583 88C3                <1>     mov bl, al
   431 00000585 2C31                <1>     sub al, "1"
   432                              <1>     ;al is now a 0 based partition number
   433 00000587 C1E004              <1>     shl eax, 4  ;Multiply by 16 to get number of bytes into the table
   434 0000058A 488B351C070000      <1>     mov rsi, qword [xferBuffer]
   435 00000591 488DB406BE010000    <1>     lea rsi, qword [rsi + mbr.mbrEntry1 + rax]    ;Point to the entry we need
   436 00000599 F60680              <1>     test byte [rsi + mbrEntry.ptnAtrib], 80h
   437 0000059C 7411                <1>     jz .okToDelete
   438 0000059E 488D151D0C0000      <1>     lea rdx, deleteCannotMsg
   439 000005A5 E839030000          <1>     call print
   440 000005AA E915FBFFFF          <1>     jmp mainLoop
   441                              <1> .okToDelete:
   442 000005AF 881D610C0000        <1>     mov byte [deleteOkMsg.number], bl
   443 000005B5 31C0                <1>     xor eax, eax
   444 000005B7 48AB                <1>     stosq
   445 000005B9 48AB                <1>     stosq
   446 000005BB 31D2                <1>     xor edx, edx
   447 000005BD E883020000          <1>     call sectorWrite
   448 000005C2 0F82E9000000        <1>     jc badWriteExit
   449 000005C8 488D153B0C0000      <1>     lea rdx, deleteOkMsg
   450 000005CF E9F0FAFFFF          <1>     jmp mainLoop
   451                              <1> 
   452                              <1> displayPtnInfoMain:
   453                              <1> ;This is done
   454 000005D4 E89D020000          <1>     call getMBRandCheckValid
   455 000005D9 0F82DB000000        <1>     jc badReadExit
   456 000005DF 0F85DFFAFFFF        <1>     jnz mainLoop
   457 000005E5 E83A030000          <1>     call printPartitionStatusTable
   458 000005EA E9D5FAFFFF          <1>     jmp mainLoop
   459                              <1> 
   460                              <1> selectDiskMain:
   461                              <1> ;We select the disk and also read its size and sector size into the variables
   462                              <1> ;1) Say how many disks there are
   463                              <1> ;2) Prompt the user to select a disk
   464                              <1> ;3) Ensure it is a valid number
   465                              <1> ;4) Set the disk number variable
   466                              <1> ;5) Get the disk parameters
   467                              <1> ;6) Exit
   468                              <1> ;If al is greater than 8, then FDISK (for now), can only handle 8 hard disks
   469 000005EF 8A05A7060000        <1>     mov al, byte [numDisks] ;Get the number of disks
   470 000005F5 3C08                <1>     cmp al, 8
   471 000005F7 7602                <1>     jbe .proceed
   472 000005F9 B008                <1>     mov al, 8
   473                              <1> .proceed:
   474 000005FB 0430                <1>     add al, "0" ;Convert to ASCII
   475 000005FD 8805340C0000        <1>     mov byte [selectNumber.number], al
   476 00000603 8805640C0000        <1>     mov byte [selectPrompt.number], al
   477 00000609 488D15120C0000      <1>     lea rdx, selectNumber
   478 00000610 E8CE020000          <1>     call print
   479                              <1> .promptLoop:
   480 00000615 488D15310C0000      <1>     lea rdx, selectPrompt
   481 0000061C E8C2020000          <1>     call print
   482 00000621 B302                <1>     mov bl, 2
   483 00000623 E883020000          <1>     call takeInput
   484 00000628 803D7A06000001      <1>     cmp byte [charsTyped], 1
   485 0000062F 75E4                <1>     jne .promptLoop
   486 00000631 0FB60572060000      <1>     movzx eax, byte [inputString]  ;Get the first byte
   487 00000638 3C31                <1>     cmp al, "1"
   488 0000063A 72D9                <1>     jb .promptLoop
   489 0000063C 3C38                <1>     cmp al, "8"
   490 0000063E 77D5                <1>     ja .promptLoop
   491 00000640 2C30                <1>     sub al, "0" ;Get 1 based number 
   492 00000642 880549060000        <1>     mov byte [currentDisk], al  ;Change the current Disk value
   493 00000648 E807060000          <1>     call biosGetHardDiskParameters  ;Now we get the FDD parameters.
   494 0000064D E972FAFFFF          <1>     jmp mainLoop
   495                              <1> 
   496                              <1> exit:
   497                              <1> ;In this case exit is done by ways of triple fault
   498                              <1> ;To do this, we hook int43h to prevent the user from stopping this 
   499                              <1> ; process and to link it directly to this the triple fault
   500 00000652 F60537060000FF      <1>     test byte [reboot], -1
   501 00000659 750C                <1>     jnz .reboot
   502 0000065B E88C000000          <1>     call freeResources
   503 00000660 B8004C0000          <1>     mov eax, 4C00h
   504 00000665 CD41                <1>     int 41h
   505                              <1> .reboot:
   506 00000667 488D1574070000      <1>     lea rdx, exitMsg
   507 0000066E B800090000          <1>     mov eax, 0900h
   508 00000673 CD41                <1>     int 41h
   509 00000675 488D150E000000      <1>     lea rdx, .badInstruction
   510 0000067C B843250000          <1>     mov eax, 2543h
   511 00000681 CD41                <1>     int 41h
   512 00000683 B800080000          <1>     mov eax, 0800h  ;Input no echo
   513 00000688 CD41                <1>     int 41h
   514                              <1> .badInstruction:
   515 0000068A 0F011D06000000      <1>     lidt [.resetIDT] ;Triple fault the machine
   516 00000691 EB00                <1>     jmp short .toHell
   517                              <1> .toHell:
   518 00000693 CD00                <1>     int 00h ;Call div by 0 to trigger reboot if not somehow failed yet
   519 00000695 EBFC                <1>     jmp short .toHell
   520                              <1> .resetIDT:
   521 00000697 0000                <1>     dw 0
   522 00000699 0000000000000000    <1>     dq 0
   523                              <1> .ctrlCHandler:
   524                              <1> ;If the reboot flag is set, kill the computer
   525 000006A1 F605E8050000FF      <1>     test byte [reboot], -1
   526 000006A8 75BD                <1>     jnz .reboot
   527 000006AA E83D000000          <1>     call freeResources
   528 000006AF F9                  <1>     stc ;Continue with the exit
   529 000006B0 C3                  <1>     ret ;Return with CF set kills the task
   530                              <1> 
   531                              <1> badWriteExit:
   532 000006B1 488D15F9FFFFFF      <1>     lea rdx, badWriteExit
   533 000006B8 EB19                <1>     jmp short badPrint
   534                              <1> badReadExit:
   535 000006BA 488D15E30D0000      <1>     lea rdx, badReadMsg
   536 000006C1 EB10                <1>     jmp short badPrint
   537                              <1> badMemoryExit:
   538 000006C3 488D15480D0000      <1>     lea rdx, noMemoryMsg
   539 000006CA EB07                <1>     jmp short badPrint
   540                              <1> badSectorExit:
   541 000006CC 488D15B40D0000      <1>     lea rdx, badSectorMsg
   542                              <1> badPrint:
   543 000006D3 B409                <1>     mov ah, 09h
   544 000006D5 CD41                <1>     int 41h
   545                              <1> badExit:
   546                              <1> ;If we need to reboot, reboot even after an error.
   547 000006D7 F605B2050000FF      <1>     test byte [reboot], -1
   548 000006DE 7587                <1>     jnz exit.reboot
   549 000006E0 E807000000          <1>     call freeResources
   550 000006E5 B8FF4C0000          <1>     mov eax, 4CFFh  ;Exit bad
   551 000006EA CD41                <1>     int 41h
   552                              <1> 
   553                              <1> freeResources:
   554                              <1> ;Any memory taken from DOS, free it here
   555 000006EC 48813DB60500000000- <1>     cmp qword [xferBuffer], 0
   555 000006F5 0000                <1>
   556                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000006F7 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000006F9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557 000006FA 50                  <1>     push rax
   558 000006FB 4150                <1>     push r8
   559 000006FD 4C8B05A9050000      <1>     mov r8, qword [xferBuffer]
   560 00000704 B800490000          <1>     mov eax, 4900h
   561 00000709 CD41                <1>     int 41h
   562 0000070B 4158                <1>     pop r8
   563 0000070D 58                  <1>     pop rax
   564                              <1>     return
    13                              <2> %%_ret:
    14 0000070E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    33                                  %include "./Source/fdskUtil.asm"
     1                              <1> 
     2                              <1> ;General Utility functions
     3                              <1> getValue:
     4                              <1> ;Input: ah = Upper ASCII digit
     5                              <1> ;       al = Lower ASCII digit
     6                              <1> ;Output: eax = Number typed in (between 0 and 99)
     7                              <1> ;           If CF=CY, error
     8 0000070F 3C39                <1>     cmp al, "9"
     9 00000711 7723                <1>     ja .bad
    10 00000713 3C30                <1>     cmp al, "0"
    11 00000715 721F                <1>     jb .bad
    12 00000717 80FC39              <1>     cmp ah, "9"
    13 0000071A 771A                <1>     ja .bad
    14 0000071C 80FC30              <1>     cmp ah, "0"
    15 0000071F 7215                <1>     jb .bad
    16                              <1> ;Digits are valid, now proceed
    17 00000721 80EC30              <1>     sub ah, "0"
    18 00000724 2C30                <1>     sub al, "0"
    19 00000726 0FB6C8              <1>     movzx ecx, al
    20 00000729 0FB6C4              <1>     movzx eax, ah
    21 0000072C B30A                <1>     mov bl, 10
    22 0000072E F6E3                <1>     mul bl  ;Multiply al with bl, result in al
    23 00000730 00C8                <1>     add al, cl
    24 00000732 0FB6C0              <1>     movzx eax, al
    25                              <1>     return
    13                              <2> %%_ret:
    14 00000735 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .bad:
    27 00000736 F9                  <1>     stc
    28                              <1>     return
    13                              <2> %%_ret:
    14 00000737 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getPartitionFlags:
    31                              <1> ;Gets the partition flags ptnFlags and numValidPtn
    32 00000738 488B356E050000      <1>     mov rsi, qword [xferBuffer]
    33 0000073F 488DB6BE010000      <1>     lea rsi, qword [rsi + mbr.mbrEntry1]
    34 00000746 C6055905000000      <1>     mov byte [ptnFlags], 0  ;Clear the bitfield
    35 0000074D C6055305000000      <1>     mov byte [numValidPtn], 0   ;And this variable
    36 00000754 B301                <1>     mov bl, 1
    37 00000756 B904000000          <1>     mov ecx, 4  ;Scan 4 MBR table entries
    38                              <1> .ptnScanLoop:
    39 0000075B E805000000          <1>     call .ptnSigSet
    40 00000760 FFC9                <1>     dec ecx
    41 00000762 75F7                <1>     jnz .ptnScanLoop
    42                              <1>     return
    13                              <2> %%_ret:
    14 00000764 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                              <1> 
    44                              <1> .ptnSigSet:
    45                              <1> ;Input: bl = On first call, with inital value of mask
    46 00000765 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]
    47 00000768 A8FF                <1>     test al, -1
    48 0000076A 741D                <1>     jz .pssNo
    49 0000076C 081D34050000        <1>     or byte [ptnFlags], bl
    50 00000772 FE052F050000        <1>     inc byte [numValidPtn]
    51 00000778 F60680              <1>     test byte byte [rsi + mbrEntry.ptnAtrib], 80h
    52 0000077B 740C                <1>     jz .pssNo
    53 0000077D C0E304              <1>     shl bl, 4   ;Move bit to high nybble
    54 00000780 081D20050000        <1>     or byte [ptnFlags], bl
    55 00000786 C0EB04              <1>     shr bl, 4   ;Bring it back low
    56                              <1> .pssNo:
    57 00000789 4881C610000000      <1>     add rsi, mbrEntry_size
    58 00000790 D0E3                <1>     shl bl, 1
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000792 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> checkPartitionValid:
    62                              <1> ;Checks if the given partition number is valid or invalid
    63                              <1> ;Input: eax = Partition Number 1-4 
    64                              <1> ;Output: ZF = ZE if value in eax not valid
    65                              <1> ;        ZF = NZ if value in eax is valid
    66 00000793 50                  <1>     push rax
    67 00000794 51                  <1>     push rcx
    68 00000795 FEC8                <1>     dec al  ;Turn into a zero based number (for shift factor)
    69 00000797 88C1                <1>     mov cl, al  
    70 00000799 B001                <1>     mov al, 1   ;Set mask bit
    71 0000079B D2E0                <1>     shl al, cl  ;Shift the mask bit into the right place
    72 0000079D 8A0D03050000        <1>     mov cl, byte [ptnFlags] ;Get the flags
    73 000007A3 80E10F              <1>     and cl, 0Fh ;Keep only the low nybble
    74 000007A6 20C1                <1>     and cl, al  ;Set the Status Flags. If this is zero, ptn not active
    75 000007A8 59                  <1>     pop rcx
    76 000007A9 58                  <1>     pop rax
    77                              <1>     return
    13                              <2> %%_ret:
    14 000007AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    78                              <1> 
    79                              <1> getPtnType:
    80                              <1> ;Based on ptnStart and ptnSize, puts the right type of partition
    81                              <1> ;Since we can only make these partitions (for now) at sector 64
    82                              <1> ; of the disk, we can always assume that ptnStart is at 64
    83                              <1> ;If size < 4MB, FAT12, use 01h
    84                              <1> ;If size < 65,536 sectors, use 04h
    85                              <1> ;If size < 1048576 sectors (512Mb), use 06h
    86                              <1> ;Else, use 0Ch
    87 000007AB 8B05F0040000        <1>     mov eax, dword [ptnSize]
    88 000007B1 3DEA1F0000          <1>     cmp eax, 4085*2
    89 000007B6 7216                <1>     jb .fat12
    90 000007B8 3D00000100          <1>     cmp eax, 65536
    91 000007BD 7217                <1>     jb .fat16
    92 000007BF 3D00001000          <1>     cmp eax, 1048576
    93 000007C4 7218                <1>     jb .fat16b
    94 000007C6 C605D80400000C      <1>     mov byte [ptnType], 0Ch
    95                              <1>     return
    13                              <2> %%_ret:
    14 000007CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    96                              <1> .fat12:
    97 000007CE C605D004000001      <1>     mov byte [ptnType], 01h
    98                              <1>     return
    13                              <2> %%_ret:
    14 000007D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    99                              <1> .fat16:
   100 000007D6 C605C804000004      <1>     mov byte [ptnType], 04h
   101                              <1>     return
    13                              <2> %%_ret:
    14 000007DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   102                              <1> .fat16b:
   103 000007DE C605C004000006      <1>     mov byte [ptnType], 06h
   104                              <1>     return
    13                              <2> %%_ret:
    14 000007E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   105                              <1> 
   106                              <1> 
   107                              <1> getYNresponse:
   108                              <1> ;Prints a message, and waits for input and verfies it is Y or N.
   109                              <1> ;Input: rdx = String to print
   110                              <1> ;Return: ZF = ZE => Y
   111                              <1> ;        ZF = NZ => N
   112 000007E6 52                  <1>     push rdx    ;Save the input string ptr
   113                              <1> .ep:
   114 000007E7 E8F7000000          <1>     call print
   115 000007EC B302                <1>     mov bl, 2
   116 000007EE E8B8000000          <1>     call takeInput
   117 000007F3 803DAF04000001      <1>     cmp byte [charsTyped], 1
   118 000007FA 75EB                <1>     jne .ep
   119 000007FC 0FB605A7040000      <1>     movzx eax, byte [inputString]
   120 00000803 3C79                <1>     cmp al, "y"
   121 00000805 740F                <1>     je .yResponse
   122 00000807 3C59                <1>     cmp al, "Y"
   123 00000809 740B                <1>     je .yResponse
   124 0000080B 3C6E                <1>     cmp al, "n"
   125 0000080D 7409                <1>     je .nResponse
   126 0000080F 3C4E                <1>     cmp al, "N"
   127 00000811 7405                <1>     je .nResponse
   128 00000813 5A                  <1>     pop rdx
   129 00000814 EBD0                <1>     jmp short getYNresponse
   130                              <1> .yResponse:
   131 00000816 5A                  <1>     pop rdx
   132                              <1>     return
    13                              <2> %%_ret:
    14 00000817 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   133                              <1> .nResponse:
   134 00000818 5A                  <1>     pop rdx
   135 00000819 4839D0              <1>     cmp rax, rdx    ;These cannot be equal at all
   136                              <1>     return
    13                              <2> %%_ret:
    14 0000081C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   137                              <1> 
   138                              <1> 
   139                              <1> sectorRead:
   140                              <1> ;Input: rdx = Sector to read from disk into the buffer
   141 0000081D 48891591040000      <1>     mov qword [sectorNum], rdx
   142 00000824 51                  <1>     push rcx
   143 00000825 B903030000          <1>     mov ecx, 0303h  ;ch=number of "resets", cl = Number of retrys
   144                              <1> .tryAgain:
   145 0000082A E8D1030000          <1>     call biosReadSector
   146 0000082F 7312                <1>     jnc .exit
   147 00000831 FEC9                <1>     dec cl  ;One less retry
   148 00000833 75F5                <1>     jnz .tryAgain
   149 00000835 E80C040000          <1>     call biosResetHardDisk
   150 0000083A 7207                <1>     jc .exit    ;If this fails, just fail automatically
   151 0000083C B103                <1>     mov cl, 3   ;Reset retry count
   152 0000083E FECD                <1>     dec ch      ;One less reset check
   153 00000840 75E8                <1>     jnz .tryAgain
   154 00000842 F9                  <1>     stc
   155                              <1> .exit:
   156 00000843 59                  <1>     pop rcx
   157                              <1>     return
    13                              <2> %%_ret:
    14 00000844 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> sectorWrite:
   160                              <1> ;Input: rdx = Sector to write to disk from the buffer
   161 00000845 48891569040000      <1>     mov qword [sectorNum], rdx
   162 0000084C 51                  <1>     push rcx
   163 0000084D B903030000          <1>     mov ecx, 0303h  ;ch=number of "resets", cl = Number of retrys
   164                              <1> .tryAgain:
   165 00000852 E8CC030000          <1>     call biosWriteSector
   166 00000857 7314                <1>     jnc .exitGood
   167 00000859 FEC9                <1>     dec cl  ;One less retry
   168 0000085B 75F5                <1>     jnz .tryAgain
   169 0000085D E8E4030000          <1>     call biosResetHardDisk
   170 00000862 7207                <1>     jc .exit    ;If this fails, just fail automatically
   171 00000864 B103                <1>     mov cl, 3   ;Reset retry count
   172 00000866 FECD                <1>     dec ch      ;One less reset check
   173 00000868 75E8                <1>     jnz .tryAgain
   174 0000086A F9                  <1>     stc
   175                              <1> .exit:
   176 0000086B 59                  <1>     pop rcx
   177                              <1>     return
    13                              <2> %%_ret:
    14 0000086C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   178                              <1> .exitGood:
   179 0000086D C6051C040000FF      <1>     mov byte [reboot], -1   ;Successful write => Need to reboot now
   180 00000874 EBF5                <1>     jmp short .exit
   181                              <1> 
   182                              <1> getMBRandCheckValid:
   183                              <1> ;If CF=CY, error, exit. Error reading disk
   184                              <1> ;If CF=NC and ZF=ZE, Valid MBR
   185                              <1> ;If CF=CY and ZF=NZ, Invalid or missing MBR, return to mainLoop
   186                              <1> ;Updates the partition info if all ok!
   187 00000876 31D2                <1>     xor edx, edx    ;Read sector 0
   188 00000878 E8A0FFFFFF          <1>     call sectorRead
   189                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000087D 72(6C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   190 0000087F 488B3527040000      <1>     mov rsi, qword [xferBuffer]
   191 00000886 0FB786FE010000      <1>     movzx eax, word [rsi + mbr.mbrSig]  ;Get this sig
   192 0000088D 663D55AA            <1>     cmp ax, 0AA55h  ;Usual
   193 00000891 7410                <1>     je .greatMbr
   194 00000893 663DAA55            <1>     cmp ax, 055AAh  ;Unusual but we accept it
   195 00000897 740A                <1>     je .greatMbr
   196                              <1>     ;Bad Disk error, return to main menu
   197 00000899 E82C000000          <1>     call printBadMBR
   198 0000089E 31C0                <1>     xor eax, eax
   199 000008A0 FFC0                <1>     inc eax
   200                              <1>     return
    13                              <2> %%_ret:
    14 000008A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> .greatMbr:
   202 000008A3 9C                  <1>     pushf
   203 000008A4 E88FFEFFFF          <1>     call getPartitionFlags  ;Now update the partition detail flags
   204 000008A9 9D                  <1>     popf
   205                              <1>     return
    13                              <2> %%_ret:
    14 000008AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1>     
   207                              <1> takeInput:
   208                              <1> ;Input: bl = Number of chars to input
   209                              <1> ;Simply wraps the call to the buffered input function and sanitises the cmdline
   210 000008AB 31C0                <1>     xor eax, eax
   211 000008AD 8905F5030000        <1>     mov dword [cmdLine], eax
   212 000008B3 8805F3030000        <1>     mov byte [cmdLine + 4], al
   213 000008B9 488D15E8030000      <1>     lea rdx, cmdLine
   214 000008C0 881A                <1>     mov byte [rdx], bl   ;Read 1 char (plus CR)
   215 000008C2 B80A0C0000          <1>     mov eax, 0C0Ah  ;Flush Input buffer and do Buffered Input
   216 000008C7 CD41                <1>     int 41h
   217                              <1>     return
    13                              <2> %%_ret:
    14 000008C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> 
   220                              <1> ;Print Util Functions
   221                              <1> printBadMBR:
   222 000008CA 488D15640B0000      <1>     lea rdx, invalidMBRMsg
   223 000008D1 EB10                <1>     jmp short print
   224                              <1> printExit:
   225 000008D3 488D1508050000      <1>     lea rdx, exitMsg
   226 000008DA EB07                <1>     jmp short print
   227                              <1> printcrlf:
   228 000008DC 488D15DA030000      <1>     lea rdx, crlf
   229                              <1> print:
   230 000008E3 B800090000          <1>     mov eax, 0900h
   231 000008E8 CD41                <1>     int 41h
   232                              <1>     return
    13                              <2> %%_ret:
    14 000008EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> printPrompt:
   235 000008EB E8ECFFFFFF          <1>     call printcrlf
   236 000008F0 8A059B030000        <1>     mov al, byte [currentDisk]
   237 000008F6 0430                <1>     add al, "0" ;Convert to ASCII digit
   238 000008F8 880551050000        <1>     mov byte [drvNum], al
   239 000008FE 488D153F050000      <1>     lea rdx, prompt
   240 00000905 EBDC                <1>     jmp short print
   241                              <1> 
   242                              <1> printVersion:
   243 00000907 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
   244 00000909 CD41                <1>     int 41h
   245 0000090B 50                  <1>     push rax
   246 0000090C 0FB6C0              <1>     movzx eax, al
   247 0000090F E881010000          <1>     call printDecimalWordAtCursor
   248 00000914 B22E                <1>     mov dl, "."
   249 00000916 B402                <1>     mov ah, 02h
   250 00000918 CD41                <1>     int 41h
   251 0000091A 58                  <1>     pop rax
   252 0000091B 0FB6C4              <1>     movzx eax, ah
   253 0000091E E872010000          <1>     call printDecimalWordAtCursor
   254                              <1>     return
    13                              <2> %%_ret:
    14 00000923 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   255                              <1> 
   256                              <1> printPartitionStatusTable:
   257                              <1> ;xferBuffer must have the MBR we are acting on loaded
   258                              <1> ;Start by cleaning the string
   259 00000924 E8B3FFFFFF          <1>     call printcrlf
   260 00000929 E8AEFFFFFF          <1>     call printcrlf
   261 0000092E 488D153D090000      <1>     lea rdx, partTitle
   262 00000935 E8A9FFFFFF          <1>     call print
   263                              <1> 
   264 0000093A 488B356C030000      <1>     mov rsi, qword [xferBuffer]
   265 00000941 488DB6BE010000      <1>     lea rsi, qword [rsi + mbr.mbrEntry1]    ;Goto first table entry
   266 00000948 807E0400            <1>     cmp byte [rsi + mbrEntry.ptnType], 00
   267 0000094C 7407                <1>     je .second
   268 0000094E B301                <1>     mov bl, 1
   269 00000950 E889000000          <1>     call .fillString
   270                              <1> .second:
   271 00000955 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   272 0000095C 807E0400            <1>     cmp byte [rsi + mbrEntry.ptnType], 00
   273 00000960 7407                <1>     je .third
   274 00000962 B302                <1>     mov bl, 2
   275 00000964 E875000000          <1>     call .fillString
   276                              <1> .third:
   277 00000969 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   278 00000970 807E0400            <1>     cmp byte [rsi + mbrEntry.ptnType], 00
   279 00000974 7407                <1>     je .fourth
   280 00000976 B303                <1>     mov bl, 3
   281 00000978 E861000000          <1>     call .fillString
   282                              <1> .fourth:
   283 0000097D 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   284 00000984 807E0400            <1>     cmp byte [rsi + mbrEntry.ptnType], 00
   285 00000988 7407                <1>     je .exit
   286 0000098A B304                <1>     mov bl, 4
   287 0000098C E84D000000          <1>     call .fillString
   288                              <1> .exit:
   289 00000991 488D3DCB090000      <1>     lea rdi, totalSpaceMsg.sizeCount
   290 00000998 48B820202020202020- <1>     mov rax, "        "
   290 000009A1 20                  <1>
   291 000009A2 57                  <1>     push rdi
   292 000009A3 48AB                <1>     stosq
   293 000009A5 5F                  <1>     pop rdi
   294 000009A6 8B05E6020000        <1>     mov eax, dword [curDiskSize]    ;Get the current disk size
   295 000009AC E855010000          <1>     call printDecimalWord
   296                              <1> 
   297 000009B1 488D3DDA090000      <1>     lea rdi, totalSpaceMsg.sectorCount
   298 000009B8 B820202020          <1>     mov eax, "    "
   299 000009BD 57                  <1>     push rdi
   300 000009BE AB                  <1>     stosd
   301 000009BF 5F                  <1>     pop rdi
   302 000009C0 0FB705D3020000      <1>     movzx eax, word [sectorSize]
   303 000009C7 E83A010000          <1>     call printDecimalWord
   304                              <1> 
   305 000009CC 488D153A090000      <1>     lea rdx, totalSpaceMsg
   306 000009D3 E80BFFFFFF          <1>     call print
   307 000009D8 E8FFFEFFFF          <1>     call printcrlf
   308                              <1>     return
    13                              <2> %%_ret:
    14 000009DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   309                              <1> 
   310                              <1> .fillString:
   311                              <1> ;Input:
   312                              <1> ; bl = Partition number (number 1-4)
   313                              <1> ; rsi -> mbr entry to write the string for
   314 000009DE 488D3DF4080000      <1>     lea rdi, partString
   315 000009E5 B020                <1>     mov al, SPC ;Fill the string with space characters
   316 000009E7 B931000000          <1>     mov ecx, partStringL
   317 000009EC F3AA                <1>     rep stosb   ;Cleanse the string
   318                              <1>     
   319 000009EE 80C330              <1>     add bl, "0"
   320 000009F1 881DE6080000        <1>     mov byte [partString.ptnNum], bl
   321 000009F7 F60680              <1>     test byte [rsi + mbrEntry.ptnAtrib], 80h
   322 000009FA 7407                <1>     jz .notActive
   323 000009FC C605E308000041      <1>     mov byte [partString.ptnSts], "A"
   324                              <1> .notActive:
   325                              <1> ;01h is FAT12
   326                              <1> ;04h, 06h and 0Eh are FAT16
   327                              <1> ;0Bh and 0Ch are FAT32 
   328 00000A03 488D3DE0080000      <1>     lea rdi, partString.ptnFS   ;Point to the FS part
   329 00000A0A 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]   ;Get the type
   330 00000A0D 3C01                <1>     cmp al, 01
   331 00000A0F 7424                <1>     je .fat12
   332 00000A11 3C04                <1>     cmp al, 04h
   333 00000A13 742A                <1>     je .fat16
   334 00000A15 3C06                <1>     cmp al, 06h
   335 00000A17 7426                <1>     je .fat16
   336 00000A19 3C0E                <1>     cmp al, 0Eh
   337 00000A1B 7422                <1>     je .fat16
   338 00000A1D 3C0B                <1>     cmp al, 0Bh
   339 00000A1F 7428                <1>     je .fat32
   340 00000A21 3C0C                <1>     cmp al, 0Ch
   341 00000A23 7424                <1>     je .fat32
   342                              <1>     ;Else we print the number
   343 00000A25 E84C010000          <1>     call getHexTwoBytes
   344 00000A2A 86C4                <1>     xchg al, ah
   345 00000A2C AA                  <1>     stosb
   346 00000A2D 88E0                <1>     mov al, ah
   347 00000A2F AA                  <1>     stosb
   348 00000A30 B068                <1>     mov al, "h"
   349 00000A32 AA                  <1>     stosb
   350 00000A33 EB1F                <1>     jmp short .fatCont
   351                              <1> .fat12:
   352 00000A35 56                  <1>     push rsi
   353 00000A36 488D3595090000      <1>     lea rsi, fat12String
   354 00000A3D EB12                <1>     jmp short .fatCmn
   355                              <1> .fat16:
   356 00000A3F 56                  <1>     push rsi
   357 00000A40 488D3590090000      <1>     lea rsi, fat16String
   358 00000A47 EB08                <1>     jmp short .fatCmn
   359                              <1> .fat32:
   360 00000A49 56                  <1>     push rsi
   361 00000A4A 488D358B090000      <1>     lea rsi, fat32String
   362                              <1> .fatCmn:
   363 00000A51 A5                  <1>     movsd
   364 00000A52 A4                  <1>     movsb
   365 00000A53 5E                  <1>     pop rsi
   366                              <1> .fatCont:
   367 00000A54 8B4608              <1>     mov eax, dword [rsi + mbrEntry.lbaStart]
   368 00000A57 488D3D92080000      <1>     lea rdi, partString.ptnStart
   369 00000A5E 50                  <1>     push rax
   370 00000A5F E8A2000000          <1>     call printDecimalWord
   371 00000A64 58                  <1>     pop rax
   372 00000A65 8B5E0C              <1>     mov ebx, dword [rsi + mbrEntry.numSectors]
   373 00000A68 01D8                <1>     add eax, ebx
   374 00000A6A FFC8                <1>     dec eax ;Get the address of the last sector (one less than extant)
   375 00000A6C 488D3D86080000      <1>     lea rdi, partString.ptnEnd
   376 00000A73 53                  <1>     push rbx
   377 00000A74 E88D000000          <1>     call printDecimalWord
   378 00000A79 5B                  <1>     pop rbx
   379 00000A7A 89D8                <1>     mov eax, ebx
   380 00000A7C 488D3D7F080000      <1>     lea rdi, partString.ptnSize
   381 00000A83 E87E000000          <1>     call printDecimalWord
   382                              <1> 
   383 00000A88 488D154A080000      <1>     lea rdx, partString
   384 00000A8F E84FFEFFFF          <1>     call print
   385                              <1>     return
    13                              <2> %%_ret:
    14 00000A94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   386                              <1> 
   387                              <1> 
   388                              <1> 
   389                              <1> printDecimalWordAtCursor:
   390                              <1> ;Takes the qword in eax and prints its decimal representation
   391 00000A95 31C9                <1>     xor ecx, ecx
   392 00000A97 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   393 00000A99 85C0                <1>     test eax, eax
   394 00000A9B 750C                <1>     jnz .notZero
   395 00000A9D B930000000          <1>     mov ecx, "0"
   396 00000AA2 BD01000000          <1>     mov ebp, 1  ;Print one digit
   397 00000AA7 EB3E                <1>     jmp short .dpfb2
   398                              <1> .notZero:
   399 00000AA9 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   400 00000AAB BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   401                              <1> .dpfb0:
   402 00000AB0 FFC5                <1>     inc ebp
   403 00000AB2 81FD08000000        <1>     cmp ebp, 8
   404 00000AB8 7206                <1>     jb .dpfb00
   405 00000ABA 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   406 00000ABE EB04                <1>     jmp short .dpfb01
   407                              <1> .dpfb00:
   408 00000AC0 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   409                              <1> .dpfb01:
   410 00000AC4 31D2                <1>     xor edx, edx
   411 00000AC6 48F7F6              <1>     div rsi
   412 00000AC9 80C230              <1>     add dl, '0'
   413 00000ACC 80FA39              <1>     cmp dl, '9'
   414 00000ACF 7603                <1>     jbe .dpfb1
   415 00000AD1 80C207              <1>     add dl, 'A'-'0'-10
   416                              <1> .dpfb1:
   417 00000AD4 81FD08000000        <1>     cmp ebp, 8
   418 00000ADA 7204                <1>     jb .dpfb10
   419 00000ADC 88D3                <1>     mov bl, dl ;Add the bottom bits
   420 00000ADE EB02                <1>     jmp short .dpfb11
   421                              <1> .dpfb10:
   422 00000AE0 88D1                <1>     mov cl, dl    ;Save remainder byte
   423                              <1> .dpfb11:
   424 00000AE2 4885C0              <1>     test rax, rax
   425 00000AE5 75C9                <1>     jnz .dpfb0
   426                              <1> .dpfb2:
   427 00000AE7 81FD08000000        <1>     cmp ebp, 8
   428 00000AED 7208                <1>     jb .dpfb20
   429 00000AEF 88DA                <1>     mov dl, bl
   430 00000AF1 48C1EB08            <1>     shr rbx, 8
   431 00000AF5 EB06                <1>     jmp short .dpfb21
   432                              <1> .dpfb20:
   433 00000AF7 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   434 00000AF9 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   435                              <1> .dpfb21:
   436 00000AFD B402                <1>     mov ah, 02h
   437 00000AFF CD41                <1>     int 41h
   438 00000B01 FFCD                <1>     dec ebp
   439 00000B03 75E2                <1>     jnz .dpfb2
   440                              <1>     return
    13                              <2> %%_ret:
    14 00000B05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> printDecimalWord:
   443                              <1> ;Takes the qword in eax and prints its decimal representation
   444                              <1> ;Result placed at [rdi]
   445 00000B06 56                  <1>     push rsi
   446 00000B07 31C9                <1>     xor ecx, ecx
   447 00000B09 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   448 00000B0B 85C0                <1>     test eax, eax
   449 00000B0D 750C                <1>     jnz .notZero
   450 00000B0F B930000000          <1>     mov ecx, "0"
   451 00000B14 BD01000000          <1>     mov ebp, 1  ;Print one digit
   452 00000B19 EB3E                <1>     jmp short .dpfb2
   453                              <1> .notZero:
   454 00000B1B 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   455 00000B1D BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   456                              <1> .dpfb0:
   457 00000B22 FFC5                <1>     inc ebp
   458 00000B24 81FD08000000        <1>     cmp ebp, 8
   459 00000B2A 7206                <1>     jb .dpfb00
   460 00000B2C 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   461 00000B30 EB04                <1>     jmp short .dpfb01
   462                              <1> .dpfb00:
   463 00000B32 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   464                              <1> .dpfb01:
   465 00000B36 31D2                <1>     xor edx, edx
   466 00000B38 48F7F6              <1>     div rsi
   467 00000B3B 80C230              <1>     add dl, '0'
   468 00000B3E 80FA39              <1>     cmp dl, '9'
   469 00000B41 7603                <1>     jbe .dpfb1
   470 00000B43 80C207              <1>     add dl, 'A'-'0'-10
   471                              <1> .dpfb1:
   472 00000B46 81FD08000000        <1>     cmp ebp, 8
   473 00000B4C 7204                <1>     jb .dpfb10
   474 00000B4E 88D3                <1>     mov bl, dl ;Add the bottom bits
   475 00000B50 EB02                <1>     jmp short .dpfb11
   476                              <1> .dpfb10:
   477 00000B52 88D1                <1>     mov cl, dl    ;Save remainder byte
   478                              <1> .dpfb11:
   479 00000B54 4885C0              <1>     test rax, rax
   480 00000B57 75C9                <1>     jnz .dpfb0
   481                              <1> .dpfb2:
   482 00000B59 81FD08000000        <1>     cmp ebp, 8
   483 00000B5F 7208                <1>     jb .dpfb20
   484 00000B61 88DA                <1>     mov dl, bl
   485 00000B63 48C1EB08            <1>     shr rbx, 8
   486 00000B67 EB06                <1>     jmp short .dpfb21
   487                              <1> .dpfb20:
   488 00000B69 88C8                <1>     mov al, cl    ;Get most sig digit into al
   489 00000B6B 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   490                              <1> .dpfb21:
   491 00000B6F AA                  <1>     stosb
   492 00000B70 FFCD                <1>     dec ebp
   493 00000B72 75E5                <1>     jnz .dpfb2
   494 00000B74 5E                  <1>     pop rsi
   495                              <1>     return
    13                              <2> %%_ret:
    14 00000B75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   496                              <1> 
   497                              <1> getHexTwoBytes:
   498                              <1> ;Given a number in al, get the HEX digits in ASCII in ax
   499                              <1> ;Input: al = 8 bit number 
   500                              <1> ;Output: ax = ASCII representation of the number
   501 00000B76 53                  <1>     push rbx
   502 00000B77 52                  <1>     push rdx
   503 00000B78 488D1D1A000000      <1>     lea rbx, .ascii
   504 00000B7F 0FB6C0              <1>     movzx eax, al
   505 00000B82 0FB6D0              <1>     movzx edx, al
   506 00000B85 81E20F000000        <1>     and edx, 0Fh    ;Isolate low nybble
   507 00000B8B C1E804              <1>     shr eax, 4      ;Isolate high nybble and bring it low
   508 00000B8E D7                  <1>     xlatb  ;Get high digit first
   509 00000B8F 88C6                <1>     mov dh, al  ;Save the digit in dh
   510 00000B91 88D0                <1>     mov al, dl
   511 00000B93 D7                  <1>     xlatb
   512 00000B94 88F4                <1>     mov ah, dh  ;Get the high digit in ah to form ax
   513 00000B96 5A                  <1>     pop rdx
   514 00000B97 5B                  <1>     pop rbx
   515                              <1>     return
    13                              <2> %%_ret:
    14 00000B98 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   516 00000B99 303132333435363738- <1> .ascii: db "0123456789ABCEDF"
   516 00000BA2 39414243454446      <1>
   517                              <1> 
   518                              <1> getDecimalWord:
   519                              <1> ;Works on MAX A dword in eax
   520                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   521 00000BA9 31C9                <1>     xor ecx, ecx
   522 00000BAB 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   523 00000BAD BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   524                              <1> .dpfb0:
   525 00000BB2 FFC5                <1>     inc ebp
   526 00000BB4 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   527 00000BB8 31D2                <1>     xor edx, edx
   528 00000BBA 48F7F3              <1>     div rbx
   529 00000BBD 80C230              <1>     add dl, '0'
   530 00000BC0 80FA39              <1>     cmp dl, '9'
   531 00000BC3 7603                <1>     jbe .dpfb1
   532 00000BC5 80C207              <1>     add dl, 'A'-'0'-10
   533                              <1> .dpfb1:
   534 00000BC8 88D1                <1>     mov cl, dl    ;Save remainder byte
   535 00000BCA 4885C0              <1>     test rax, rax
   536 00000BCD 75E3                <1>     jnz .dpfb0
   537                              <1>     return
    13                              <2> %%_ret:
    14 00000BCF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    34                                  %include "./Source/fdskExt.asm"
     1                              <1> ;FDISK BIOS implementers subroutine file.
     2                              <1> ;All functions that need to be implemented by BIOS implementers 
     3                              <1> ; are contained within this file with a description of what goes where and how.
     4                              <1> ;All used registers are expected to be preserved across a call.
     5                              <1> 
     6                              <1> 
     7                              <1> ;DISK FUNCTIONS
     8                              <1> ;These functions are for Disk actions
     9                              <1> biosGetNumberOfFixedDisks:
    10                              <1> ;Saves the number of Fixed Disks in numDisks
    11                              <1> ;Output: byte [numDisks] = Number of physical hard disks
    12 00000BD0 50                  <1>     push rax
    13 00000BD1 4150                <1>     push r8
    14 00000BD3 4151                <1>     push r9
    15 00000BD5 4152                <1>     push r10
    16 00000BD7 4153                <1>     push r11
    17 00000BD9 4154                <1>     push r12
    18 00000BDB 4155                <1>     push r13
    19 00000BDD 4156                <1>     push r14
    20 00000BDF 4157                <1>     push r15
    21 00000BE1 CD31                <1>     int 31h
    22 00000BE3 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 of r8
    23 00000BE7 448805AE000000      <1>     mov byte [numDisks], r8b    ;Save number of physical hard drives
    24 00000BEE 415F                <1>     pop r15
    25 00000BF0 415E                <1>     pop r14
    26 00000BF2 415D                <1>     pop r13
    27 00000BF4 415C                <1>     pop r12
    28 00000BF6 415B                <1>     pop r11
    29 00000BF8 415A                <1>     pop r10
    30 00000BFA 4159                <1>     pop r9
    31 00000BFC 4158                <1>     pop r8
    32 00000BFE 58                  <1>     pop rax
    33                              <1>     return
    13                              <2> %%_ret:
    14 00000BFF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    34                              <1> 
    35                              <1> biosReadSector:
    36                              <1> ;Reads one sector.
    37                              <1> ;Input: byte [curentDisk] = 1 based disk number to transact on
    38                              <1> ;       qword [xferBuffer] = Ptr to where to read from disk to
    39                              <1> ;       qword [sectorNum] = Number of disk sector to read
    40                              <1> ;Output: CF=NC, Nothing went wrong
    41                              <1> ;        CF=CY, Error in disk read.
    42 00000C00 50                  <1>     push rax
    43 00000C01 53                  <1>     push rbx
    44 00000C02 51                  <1>     push rcx
    45 00000C03 52                  <1>     push rdx
    46 00000C04 488B1DA2000000      <1>     mov rbx, qword [xferBuffer]
    47 00000C0B 488B0DA3000000      <1>     mov rcx, qword [sectorNum]
    48 00000C12 E869000000          <1>     call biosgetBIOSDiskNumber  ;Get disk number in dl in our case
    49 00000C17 B801820000          <1>     mov eax, 8201h
    50 00000C1C CD33                <1>     int 33h
    51 00000C1E 5A                  <1>     pop rdx
    52 00000C1F 59                  <1>     pop rcx
    53 00000C20 5B                  <1>     pop rbx
    54 00000C21 58                  <1>     pop rax
    55                              <1>     return
    13                              <2> %%_ret:
    14 00000C22 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    56                              <1>     
    57                              <1> biosWriteSector:
    58                              <1> ;Writes one sector.
    59                              <1> ;Input: byte [curentDisk] = 1 based disk number to transact on
    60                              <1> ;       qword [xferBuffer] = Ptr to where to write to disk from
    61                              <1> ;       qword [sectorNum] = Number of disk sector to write to disk
    62                              <1> ;Output: CF=NC, Nothing went wrong
    63                              <1> ;        CF=CY, Error in disk write.
    64 00000C23 50                  <1>     push rax
    65 00000C24 53                  <1>     push rbx
    66 00000C25 51                  <1>     push rcx
    67 00000C26 52                  <1>     push rdx
    68 00000C27 488B1D7F000000      <1>     mov rbx, qword [xferBuffer]
    69 00000C2E 488B0D80000000      <1>     mov rcx, qword [sectorNum]
    70 00000C35 E846000000          <1>     call biosgetBIOSDiskNumber
    71 00000C3A B801830000          <1>     mov eax, 8301h
    72 00000C3F CD33                <1>     int 33h
    73 00000C41 5A                  <1>     pop rdx
    74 00000C42 59                  <1>     pop rcx
    75 00000C43 5B                  <1>     pop rbx
    76 00000C44 58                  <1>     pop rax
    77                              <1>     return
    13                              <2> %%_ret:
    14 00000C45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    78                              <1> 
    79                              <1> biosResetHardDisk:
    80                              <1> ;Reset currentDisk
    81                              <1> ;Input: byte [curentDisk] = 1 based disk number to reset
    82                              <1> ;Output: CF=NC, Nothing went wrong
    83                              <1> ;        CF=CY, Failed to reset the disk system. Abort...
    84 00000C46 50                  <1>     push rax
    85 00000C47 52                  <1>     push rdx
    86 00000C48 E833000000          <1>     call biosgetBIOSDiskNumber
    87 00000C4D 31C0                <1>     xor eax, eax
    88 00000C4F CD33                <1>     int 33h
    89 00000C51 5A                  <1>     pop rdx
    90 00000C52 58                  <1>     pop rax
    91                              <1>     return
    13                              <2> %%_ret:
    14 00000C53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> biosGetHardDiskParameters:
    94                              <1> ;Get the size of the hard disk
    95                              <1> ;Output: qword [curDiskSize] = Number of sectors on disk
    96                              <1> ;        word [sectorSize] = Bytes/Sector value
    97 00000C54 50                  <1>     push rax
    98 00000C55 53                  <1>     push rbx
    99 00000C56 51                  <1>     push rcx
   100 00000C57 52                  <1>     push rdx
   101 00000C58 E823000000          <1>     call biosgetBIOSDiskNumber
   102 00000C5D B800880000          <1>     mov eax, 8800h
   103 00000C62 CD33                <1>     int 33h
   104                              <1>     ;Int 33h/8800h returns
   105                              <1>     ;rbx = Sector size in bytes
   106                              <1>     ;rcx = Last LBA block
   107 00000C64 4881E902000000      <1>     sub rcx, 2  ;Convert from last sector to last ok sector
   108 00000C6B FFC1                <1>     inc ecx ;Turn into a count of sectors
   109 00000C6D 48890D1E000000      <1>     mov qword [curDiskSize], rcx
   110 00000C74 66891D1F000000      <1>     mov word [sectorSize], bx
   111 00000C7B 5A                  <1>     pop rdx
   112 00000C7C 59                  <1>     pop rcx
   113 00000C7D 5B                  <1>     pop rbx
   114 00000C7E 58                  <1>     pop rax
   115                              <1>     return
    13                              <2> %%_ret:
    14 00000C7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   116                              <1> 
   117                              <1> 
   118                              <1> ;BIOS implementer utility function
   119                              <1> biosgetBIOSDiskNumber:
   120                              <1> ;A utility function, can be left as just return if unnecessary. 
   121                              <1> ;Used to translate currentDisk from an FDISK number to a BIOS specific 
   122                              <1> ; value.
   123                              <1> ;This is only used in this file and is implementer specific.
   124                              <1> ;In this case, 
   125                              <1> ;Output: dl = BIOS disk number
   126 00000C80 0FB6150A000000      <1>     movzx edx, byte [currentDisk]
   127 00000C87 FFCA                <1>     dec edx
   128 00000C89 81CA80000000        <1>     or edx, 80h ;Set SCPBIOS fixed disk bit
   129                              <1>     return
    13                              <2> %%_ret:
    14 00000C8F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    35                                  %include "./Data/fdskData.asm"
     1                              <1> ;Disk Vars
     2 00000C90 00                  <1> reboot      db 0    ;If this flag is set, should reboot on exit
     3 00000C91 01                  <1> currentDisk db 1    ;1 based. For SCP/BIOS disk 1 = 80h, disk 2 = 81h etc...
     4                              <1> 
     5 00000C92 0000000000000000    <1> curDiskSize dq 0    ;Number of usable sectors on device
     6 00000C9A 0000                <1> sectorSize  dw 0    ;Size of a sector (should always be 512, error if not)
     7                              <1> 
     8 00000C9C 00                  <1> numDisks    db 0    ;Count of fixed disks
     9                              <1> 
    10                              <1> ;Create Partition Variables
    11                              <1> ;We also refuse to use CHS. Set those entries to 0 generally
    12 00000C9D 00000000            <1> ptnStart    dd 0    ;LBA for start of partition
    13 00000CA1 00000000            <1> ptnSize     dd 0    ;Number of sectors in partition
    14 00000CA5 00                  <1> ptnType     db 0    ;Partition signature, always 0Ch
    15                              <1> 
    16                              <1> ;ActivePtnVariables
    17                              <1> ;Copy the partition status bytes here if the table is not free.
    18 00000CA6 00                  <1> ptnFlags    db 0    ;Bits [3-0] give the valid partitions
    19                              <1>                     ;Bits [7-4] give the active status of the partitions
    20 00000CA7 00                  <1> numValidPtn db 0    ;Keeps a count of the number of valid partitions
    21                              <1> 
    22                              <1> 
    23                              <1> cmdLine:    ;Users type at most 1 or 2 chars, add some padding
    24 00000CA8 00                  <1> stringLen   db 0    ;Byte 0 = Max string len
    25 00000CA9 00                  <1> charsTyped  db 0    ;Byte 1 = Num typed chars
    26 00000CAA 000000              <1> inputString db 3 dup (0)    ;Where the chars are typed
    27                              <1> ;xfer Variables
    28 00000CAD 0000000000000000    <1> xferBuffer  dq 0    ;A ptr to the memory block through which all xacts occur
    29 00000CB5 0000000000000000    <1> sectorNum   dq 0    ;Number of the sector we wish to xact with
    36                                  %include "./Data/fdskMsg.asm"
     1                              <1> ;This file will contain the "pages" of the application
     2                              <1> 
     3 00000CBD 0A0D24              <1> crlf    db LF,CR,"$"
     4                              <1> ;This message is only printed if a multitasker is detected as installed
     5                              <1> multiMsg:   
     6 00000CC0 506C65617365207374- <1>     db "Please stop all other programs and/or any networking software",
     6 00000CC9 6F7020616C6C206F74- <1>
     6 00000CD2 6865722070726F6772- <1>
     6 00000CDB 616D7320616E642F6F- <1>
     6 00000CE4 7220616E79206E6574- <1>
     6 00000CED 776F726B696E672073- <1>
     6 00000CF6 6F667477617265      <1>
     7 00000CFD 206265666F72652070- <1>     db " before proceeding.",LF,CR
     7 00000D06 726F63656564696E67- <1>
     7 00000D0F 2E0A0D              <1>
     8 00000D12 507265737320456E74- <1>     db "Press Enter to continue once this is done or ESC to return to",
     8 00000D1B 657220746F20636F6E- <1>
     8 00000D24 74696E7565206F6E63- <1>
     8 00000D2D 652074686973206973- <1>
     8 00000D36 20646F6E65206F7220- <1>
     8 00000D3F 45534320746F207265- <1>
     8 00000D48 7475726E20746F      <1>
     9 00000D4F 444F530A0D24        <1>     db "DOS",LF,CR,"$"
    10                              <1> strtMsg:
    11 00000D55 0D0A                <1>     db CR,LF
    12 00000D57 536369656E74696669- <1>     db "Scientific Control Program / Disk Operating System",LF,CR
    12 00000D60 6320436F6E74726F6C- <1>
    12 00000D69 2050726F6772616D20- <1>
    12 00000D72 2F204469736B204F70- <1>
    12 00000D7B 65726174696E672053- <1>
    12 00000D84 797374656D0A0D      <1>
    13 00000D8B 466978656420446973- <1>     db "Fixed Disk Setup Program Version $"
    13 00000D94 6B2053657475702050- <1>
    13 00000D9D 726F6772616D205665- <1>
    13 00000DA6 7273696F6E2024      <1>
    14                              <1> 
    15                              <1> cpyrtMsg:
    16 00000DAD 0A0D28432920436F70- <1>     db LF,CR,"(C) Copyright Scientific Computer Research. 2022", LF,CR,"$"
    16 00000DB6 797269676874205363- <1>
    16 00000DBF 69656E746966696320- <1>
    16 00000DC8 436F6D707574657220- <1>
    16 00000DD1 52657365617263682E- <1>
    16 00000DDA 20323032320A0D24    <1>
    17                              <1> 
    18                              <1> exitMsg:
    19 00000DE2 0D0A0A              <1>     db CR,LF,LF
    20 00000DE5 53797374656D207769- <1>     db "System will now restart",LF,CR
    20 00000DEE 6C6C206E6F77207265- <1>
    20 00000DF7 73746172740A0D      <1>
    21 00000DFE 496E7365727420626F- <1>     db "Insert bootable DOS medium in drive A:",LF,CR
    21 00000E07 6F7461626C6520444F- <1>
    21 00000E10 53206D656469756D20- <1>
    21 00000E19 696E20647269766520- <1>
    21 00000E22 413A0A0D            <1>
    22 00000E26 507265737320616E79- <1>     db "Press any key when ready...",LF,CR,"$"
    22 00000E2F 206B6579207768656E- <1>
    22 00000E38 2072656164792E2E2E- <1>
    22 00000E41 0A0D24              <1>
    23                              <1> 
    24 00000E44 466978656420446973- <1> prompt: db "Fixed Disk "
    24 00000E4D 6B20                <1>
    25 00000E4F 315D2024            <1> drvNum  db "1] $"
    26                              <1> 
    27                              <1> exitOptionMsg:
    28 00000E53 507265737320582074- <1>     db "Press X to exit",LF,CR,"$"
    28 00000E5C 6F20657869740A0D24  <1>
    29                              <1> 
    30                              <1> selectValidOption:
    31 00000E65 0D0A0A0A            <1>     db CR,LF,LF,LF,
    32 00000E69 2D2D2D2D2D2D2D2D2D- <1>     db "------------------------------------",CR,LF
    32 00000E72 2D2D2D2D2D2D2D2D2D- <1>
    32 00000E7B 2D2D2D2D2D2D2D2D2D- <1>
    32 00000E84 2D2D2D2D2D2D2D2D2D- <1>
    32 00000E8D 0D0A                <1>
    33 00000E8F 20202020506C656173- <1>     db "    Please select a valid choice    ",CR,LF,
    33 00000E98 652073656C65637420- <1>
    33 00000EA1 612076616C69642063- <1>
    33 00000EAA 686F69636520202020- <1>
    33 00000EB3 0D0A                <1>
    34 00000EB5 2D2D2D2D2D2D2D2D2D- <1>     db "------------------------------------",CR,LF,LF,LF,"$"
    34 00000EBE 2D2D2D2D2D2D2D2D2D- <1>
    34 00000EC7 2D2D2D2D2D2D2D2D2D- <1>
    34 00000ED0 2D2D2D2D2D2D2D2D2D- <1>
    34 00000ED9 0D0A0A0A24          <1>
    35                              <1> 
    36                              <1> ;Pages
    37                              <1> ;MAIN PAGE
    38                              <1> mainPageMsg:
    39 00000EDE 43686F6F7365206F6E- <1>     db "Choose one of the following:",LF,CR
    39 00000EE7 65206F662074686520- <1>
    39 00000EF0 666F6C6C6F77696E67- <1>
    39 00000EF9 3A0A0D              <1>
    40 00000EFC 202031292043726561- <1>     db "  1) Create DOS Partition",LF,CR
    40 00000F05 746520444F53205061- <1>
    40 00000F0E 72746974696F6E0A0D  <1>
    41 00000F17 20203229204368616E- <1>     db "  2) Change Active Partition",LF,CR
    41 00000F20 676520416374697665- <1>
    41 00000F29 20506172746974696F- <1>
    41 00000F32 6E0A0D              <1>
    42 00000F35 202033292044656C65- <1>     db "  3) Delete DOS Partition",LF,CR
    42 00000F3E 746520444F53205061- <1>
    42 00000F47 72746974696F6E0A0D  <1>
    43 00000F50 202034292044697370- <1>     db "  4) Display Partition Information",LF,CR,"$"
    43 00000F59 6C6179205061727469- <1>
    43 00000F62 74696F6E20496E666F- <1>
    43 00000F6B 726D6174696F6E0A0D- <1>
    43 00000F74 24                  <1>
    44                              <1> mpOptionalMsg:
    45 00000F75 202035292053656C65- <1>     db "  5) Select Fixed Disk Drive",LF,CR,"$"
    45 00000F7E 637420466978656420- <1>
    45 00000F87 4469736B2044726976- <1>
    45 00000F90 650A0D24            <1>
    46                              <1> 
    47                              <1> ;CREATE PARTITION PAGE
    48                              <1> createPageBadMsg:
    49 00000F94 5072696D6172792044- <1>     db "Primary DOS partition already exists",LF,CR,"$"
    49 00000F9D 4F5320706172746974- <1>
    49 00000FA6 696F6E20616C726561- <1>
    49 00000FAF 647920657869737473- <1>
    49 00000FB8 0A0D24              <1>
    50                              <1> createPageMsg:
    51 00000FBB 43726561746520444F- <1>     db "Create DOS Partition",LF,LF,CR
    51 00000FC4 532050617274697469- <1>
    51 00000FCD 6F6E0A0A0D          <1>
    52 00000FD2 446F20796F75207769- <1>     db "Do you wish to use the entire fixed disk for DOS? Y/N: $"
    52 00000FDB 736820746F20757365- <1>
    52 00000FE4 2074686520656E7469- <1>
    52 00000FED 726520666978656420- <1>
    52 00000FF6 6469736B20666F7220- <1>
    52 00000FFF 444F533F20592F4E3A- <1>
    52 00001008 2024                <1>
    53                              <1> createPage2Msg:
    54 0000100A 537065636966792068- <1>     db "Specify how much of the fixed disk you wish to use (1%-99%) or"
    54 00001013 6F77206D756368206F- <1>
    54 0000101C 662074686520666978- <1>
    54 00001025 6564206469736B2079- <1>
    54 0000102E 6F7520776973682074- <1>
    54 00001037 6F2075736520283125- <1>
    54 00001040 2D39392529206F72    <1>
    55 00001048 0D0A                <1>     db CR,LF,
    56 0000104A 507265737320582074- <1>     db "Press X to return to FDISK options",CR,LF,"$"
    56 00001053 6F2072657475726E20- <1>
    56 0000105C 746F20464449534B20- <1>
    56 00001065 6F7074696F6E730D0A- <1>
    56 0000106E 24                  <1>
    57                              <1> createPromptMsg: 
    58 0000106F 547970652061206E75- <1>     db "Type a number between 1 and 99] $"
    58 00001078 6D6265722062657477- <1>
    58 00001081 65656E203120616E64- <1>
    58 0000108A 2039395D2024        <1>
    59                              <1> createDoneMsg:
    60 00001090 0D0A0A5072696D6172- <1>     db CR,LF,LF,"Primary partition created", CR,LF,"$"
    60 00001099 792070617274697469- <1>
    60 000010A2 6F6E20637265617465- <1>
    60 000010AB 640D0A24            <1>
    61                              <1> createForeignBad:
    62 000010AF 0D0A4E6F6E2D444F53- <1>     db CR,LF,"Non-DOS primary partition detected",CR,LF,"$"
    62 000010B8 207072696D61727920- <1>
    62 000010C1 706172746974696F6E- <1>
    62 000010CA 206465746563746564- <1>
    62 000010D3 0D0A24              <1>
    63                              <1> 
    64                              <1> ;CHANGE ACTIVE PARTITION ON DISK PAGE
    65                              <1> activeSinglePtnMsg:
    66 000010D6 0D0A50617274697469- <1>     db CR,LF,"Partition "
    66 000010DF 6F6E20              <1>
    67                              <1> .number:
    68 000010E2 3120697320616C7265- <1>     db "1 is already active",CR,LF,"$"
    68 000010EB 616479206163746976- <1>
    68 000010F4 650D0A24            <1>
    69                              <1> 
    70                              <1> activePromptMsg:
    71 000010F8 0D0A506C6561736520- <1>     db CR,LF,"Please select a partition to mark as active (1-4): $"
    71 00001101 73656C656374206120- <1>
    71 0000110A 706172746974696F6E- <1>
    71 00001113 20746F206D61726B20- <1>
    71 0000111C 617320616374697665- <1>
    71 00001125 2028312D34293A2024  <1>
    72                              <1> activePartitionSetMsg:
    73 0000112E 0D0A50617274697469- <1>     db CR,LF,"Partition "
    73 00001137 6F6E20              <1>
    74                              <1> .number:
    75 0000113A 31206E6F7720736574- <1>     db "1 now set active",CR,LF,"$"
    75 00001143 206163746976650D0A- <1>
    75 0000114C 24                  <1>
    76                              <1> 
    77                              <1> ;DELETE PARTITION PAGE
    78                              <1> deleteNukeMsg:
    79 0000114D 0D0A                <1>     db CR,LF,
    80 0000114F 44656C657465207468- <1>     db "Delete the whole Partition Table? Y/N: $"
    80 00001158 652077686F6C652050- <1>
    80 00001161 6172746974696F6E20- <1>
    80 0000116A 5461626C653F20592F- <1>
    80 00001173 4E3A2024            <1>
    81                              <1> deleteNukeCompleteMsg:
    82 00001177 0D0A0A506172746974- <1>     db CR,LF,LF,"Partition Table Deleted",CR,LF,"$"
    82 00001180 696F6E205461626C65- <1>
    82 00001189 2044656C657465640D- <1>
    82 00001192 0A24                <1>
    83                              <1> deleteSelectMsg:
    84 00001194 0D0A506C6561736520- <1>     db CR,LF, "Please select a partition to delete (1-4): $"
    84 0000119D 73656C656374206120- <1>
    84 000011A6 706172746974696F6E- <1>
    84 000011AF 20746F2064656C6574- <1>
    84 000011B8 652028312D34293A20- <1>
    84 000011C1 24                  <1>
    85                              <1> deleteCannotMsg:
    86 000011C2 0D0A43616E6E6F7420- <1>     db CR,LF, "Cannot delete an active partition",CR,LF,"$"
    86 000011CB 64656C65746520616E- <1>
    86 000011D4 206163746976652070- <1>
    86 000011DD 6172746974696F6E0D- <1>
    86 000011E6 0A24                <1>
    87                              <1> deleteBadFoundMsg:
    88 000011E8 0D0A42616420506172- <1>     db CR,LF, "Bad Partition Table detected.",CR,LF,"$"
    88 000011F1 746974696F6E205461- <1>
    88 000011FA 626C65206465746563- <1>
    88 00001203 7465642E0D0A24      <1>
    89                              <1> deleteOkMsg:
    90 0000120A 0D0A50617274697469- <1>     db CR,LF, "Partition "
    90 00001213 6F6E20              <1>
    91                              <1> .number:
    92 00001216 312064656C65746564- <1>     db "1 deleted",CR,LF,"$"
    92 0000121F 0D0A24              <1>
    93                              <1> 
    94                              <1> ;SELECT FIXED DISK PAGE 
    95                              <1> selectNumber:
    96 00001222 0D0A464449534B2068- <1>     db CR,LF,"FDISK has detected "
    96 0000122B 617320646574656374- <1>
    96 00001234 656420              <1>
    97                              <1> .number:
    98 00001237 302046697865642044- <1>     db "0 Fixed Disk Drives",CR,LF,"$"
    98 00001240 69736B204472697665- <1>
    98 00001249 730D0A24            <1>
    99                              <1> selectPrompt:
   100 0000124D 0D0A506C6561736520- <1>     db CR,LF,"Please select a Fixed Disk (1-"
   100 00001256 73656C656374206120- <1>
   100 0000125F 466978656420446973- <1>
   100 00001268 6B2028312D          <1>
   101                              <1> .number:
   102 0000126D 31293A2024          <1>     db "1): $"
   103                              <1> ;Partition status table
   104                              <1> partTitle:
   105 00001272 2D2D2D2D2D2D2D2D2D- <1>     db "-------------------------------------------------",CR,LF
   105 0000127B 2D2D2D2D2D2D2D2D2D- <1>
   105 00001284 2D2D2D2D2D2D2D2D2D- <1>
   105 0000128D 2D2D2D2D2D2D2D2D2D- <1>
   105 00001296 2D2D2D2D2D2D2D2D2D- <1>
   105 0000129F 2D2D2D2D0D0A        <1>
   106 000012A5 506172746974696F6E- <1>     db "Partition Status Type  Start    End      Size    ",CR,LF,"$"
   106 000012AE 205374617475732054- <1>
   106 000012B7 797065202053746172- <1>
   106 000012C0 7420202020456E6420- <1>
   106 000012C9 202020202053697A65- <1>
   106 000012D2 202020200D0A24      <1>
   107                              <1> ;Partition status table string, this gets edited... a lot
   108                              <1> partString:
   109 000012D9 20202020            <1>     db "    "
   110                              <1> .ptnNum:
   111 000012DD 312020202020202020  <1>     db "1", "    ", " ", "   "
   112                              <1> .ptnSts:
   113 000012E6 41202020            <1>     db "A","  "," " 
   114                              <1> .ptnFS:
   115 000012EA 2020202020          <1>     db "     "  ;This is 5 chars, either FAT12, FAT16, FAT32 or a 2 digit num 
   116 000012EF 20                  <1>     db " "
   117                              <1> .ptnStart:
   118 000012F0 2020202020202020    <1>     db "        "   ;8 digits for the LBA of the first sector of the partition
   119 000012F8 20                  <1>     db " "
   120                              <1> .ptnEnd:
   121 000012F9 2020202020202020    <1>     db "        "   ;8 digits for the LBA of the last sector of the partition
   122 00001301 20                  <1>     db " "
   123                              <1> .ptnSize:
   124 00001302 2020202020202020    <1>     db "        "   ;8 digits for the number of sectors in the partition
   125                              <1> partStringL equ $ - partString  ;Use this to clean the string with spaces
   126 0000130A 0D0A24              <1>     db CR,LF,"$"
   127                              <1> 
   128                              <1> totalSpaceMsg:
   129 0000130D 0D0A                <1>     db CR,LF
   130 0000130F 2D2D2D2D2D2D2D2D2D- <1>     db "-------------------------------------------------",CR,LF
   130 00001318 2D2D2D2D2D2D2D2D2D- <1>
   130 00001321 2D2D2D2D2D2D2D2D2D- <1>
   130 0000132A 2D2D2D2D2D2D2D2D2D- <1>
   130 00001333 2D2D2D2D2D2D2D2D2D- <1>
   130 0000133C 2D2D2D2D0D0A        <1>
   131 00001342 20202020546F74616C- <1>     db "    Total disk size, in sectors: ", 
   131 0000134B 206469736B2073697A- <1>
   131 00001354 652C20696E20736563- <1>
   131 0000135D 746F72733A20        <1>
   132                              <1> .sizeCount:
   133 00001363 202020202020202020- <1>     db "                    ",CR,LF
   133 0000136C 202020202020202020- <1>
   133 00001375 20200D0A            <1>
   134 00001379 202020202020202020- <1>     db "            Sector Size: "
   134 00001382 202020536563746F72- <1>
   134 0000138B 2053697A653A20      <1>
   135                              <1> .sectorCount:
   136 00001392 20202020            <1>     db "    "
   137 00001396 2042797465730D0A    <1>     db " Bytes",CR,LF
   138 0000139E 2D2D2D2D2D2D2D2D2D- <1>     db "-------------------------------------------------",CR,LF,"$"
   138 000013A7 2D2D2D2D2D2D2D2D2D- <1>
   138 000013B0 2D2D2D2D2D2D2D2D2D- <1>
   138 000013B9 2D2D2D2D2D2D2D2D2D- <1>
   138 000013C2 2D2D2D2D2D2D2D2D2D- <1>
   138 000013CB 2D2D2D2D0D0A24      <1>
   139                              <1> 
   140                              <1> 
   141 000013D2 4641543132          <1> fat12String:    db "FAT12"
   142 000013D7 4641543136          <1> fat16String:    db "FAT16"
   143 000013DC 4641543332          <1> fat32String:    db "FAT32"
   144                              <1> 
   145                              <1> ;Error Messages
   146                              <1> badVerStr:
   147 000013E1 496E636F7272656374- <1>     db "Incorrect DOS version",CR,LF,"$"
   147 000013EA 20444F532076657273- <1>
   147 000013F3 696F6E0D0A24        <1>
   148                              <1> noDisks:
   149 000013F9 4E6F20666978656420- <1>     db "No fixed disks present",CR,LF,"$"
   149 00001402 6469736B7320707265- <1>
   149 0000140B 73656E740D0A24      <1>
   150                              <1> noMemoryMsg:
   151 00001412 4E6F7420656E6F7567- <1>     db "Not enough free memory in system",CR,LF,"$"
   151 0000141B 682066726565206D65- <1>
   151 00001424 6D6F727920696E2073- <1>
   151 0000142D 797374656D0D0A24    <1>
   152                              <1> invalidMBRMsg:
   153 00001435 0D0A                <1>     db CR,LF
   154 00001437 496E76616C6964206F- <1>     db "Invalid or Missing Master Boot Record",CR,LF
   154 00001440 72204D697373696E67- <1>
   154 00001449 204D61737465722042- <1>
   154 00001452 6F6F74205265636F72- <1>
   154 0000145B 640D0A              <1>
   155 0000145E 506C65617365204372- <1>     db "Please Create a new Master Boot Record",CR,LF,"$"
   155 00001467 656174652061206E65- <1>
   155 00001470 77204D617374657220- <1>
   155 00001479 426F6F74205265636F- <1>
   155 00001482 72640D0A24          <1>
   156                              <1> badSectorMsg:
   157 00001487 0D0A                <1>     db CR,LF
   158 00001489 42616420536563746F- <1>     db "Bad Sector Size Detected",CR,LF,"$"
   158 00001492 722053697A65204465- <1>
   158 0000149B 7465637465640D0A24  <1>
   159                              <1> badReadMsg:
   160 000014A4 0D0A                <1>     db CR,LF
   161 000014A6 4572726F7220726561- <1>     db "Error reading Fixed Disk",CR,LF,"$"
   161 000014AF 64696E672046697865- <1>
   161 000014B8 64204469736B0D0A24  <1>
   162                              <1> badWriteMsg:
   163 000014C1 0D0A                <1>     db CR,LF
   164 000014C3 4572726F7220777269- <1>     db "Error writing Fixed Disk",CR,LF,"$"
   164 000014CC 74696E672046697865- <1>
   164 000014D5 64204469736B0D0A24  <1>
   165                              <1> 
    37                                  
    38                                  ;Place the partial VBR here.
    39                                  ;All uninitialised values are set to 0
    40                                  ;If total sectors is bigger than 16 bits, set totSec16 to 0
    41                                  ;Else set totSec32 to 0
    42                                  partialVBR:
    43                                      istruc bpb
    44 000014DE EB0090                      at bpb.jmpBoot,     db 0EBh, 00h, 90h   ;Needed start signtature
    45 000014E1 534350444F537631            at bpb.oemName,     db 'SCPDOSv1'
    46 000014E9 0002                        at bpb.bytsPerSec,  dw 0200h        ;512 bytes per sector always
    47 000014EB 00                          at bpb.secPerClus,  db 0            ;Unset by FDISK
    48 000014EC 0000                        at bpb.revdSecCnt,  dw 0            ;Unset by FDISK
    49 000014EE 01                          at bpb.numFATs,     db 1            ;Unset by FDISK, set to 1
    50 000014EF 0000                        at bpb.rootEntCnt,  dw 0            ;Unset by FDISK
    51 000014F1 FFFF                        at bpb.totSec16,    dw -1           ;Total number of sectors on disk
    52 000014F3 F8                          at bpb.media,       db 0F8h         ;Hard Disk Media byte
    53 000014F4 0000                        at bpb.FATsz16,     dw 0            ;Unset by FDISK
    54 000014F6 3F00                        at bpb.secPerTrk,   dw 003Fh        ;Fake Hard disk geometry 64 sec/trk
    55 000014F8 FF00                        at bpb.numHeads,    dw 00FFh        ;255 Heads
    56 000014FA FFFFFFFF                    at bpb.hiddSec,     dd -1           ;Set this field
    57 000014FE FFFFFFFF                    at bpb.totSec32,    dd -1           ;Set total sec if bigger than 16 bits 
    58 00001502 00<rep 1Ah>                 iend
    59                                  partialVBRL equ $ - partialVBR
    60                                  freshMBRcopy:   ;Symbol pointing to the MBR copy appended
    60          ------------------       info: assembly required 1+2+2 passes

